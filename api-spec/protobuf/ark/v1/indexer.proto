syntax = "proto3";

package ark.v1;

import "google/api/annotations.proto";

service IndexerService {
  // GetCommitmentTx returns information about a specific commitment transaction identified by the
  // provided txid.
  rpc GetCommitmentTx(GetCommitmentTxRequest) returns (GetCommitmentTxResponse) {
    option (google.api.http) = {
      get: "/v1/commitmentTx/{txid}"
    };
  };

  // GetForfeitTxs returns the list of forfeit transactions that were submitted for the provided
  // commitment transaction.
  // The response may include pagination information if the results span multiple pages.
  rpc GetForfeitTxs(GetForfeitTxsRequest) returns (GetForfeitTxsResponse) {
    option (google.api.http) = {
      get: "/v1/commitmentTx/{txid}/forfeitTxs"
    };
  };
  
  // GetConnectors returns the tree of connectors for the provided commitment transaction.
  // The response includes a list of connector txs with details on the tree posistion and may
  // include pagination information if the results span multiple pages.
  rpc GetConnectors(GetConnectorsRequest) returns (GetConnectorsResponse) {
    option (google.api.http) = {
      get: "/v1/commitmentTx/{txid}/connectors"
    };
  };


  // GetCommitmentTxLeaves returns the list of leaves (vtxo outpoints) of all batch outputs' trees
  // included in the provided commitment transaction.
  // The response may include pagination information if the results span multiple pages.
  rpc GetCommitmentTxLeaves(GetCommitmentTxLeavesRequest) returns (GetCommitmentTxLeavesResponse) {
    option (google.api.http) = {
      get: "/v1/commitmentTx/{txid}/leaves"
    };
  };

  // GetVtxoTree returns the vtxo tree for the provided batch outpoint.
  // The response includes a list of txs with details on the tree posistion and may
  // include pagination information if the results span multiple pages.
  rpc GetVtxoTree(GetVtxoTreeRequest) returns (GetVtxoTreeResponse) {
    option (google.api.http) = {
      get: "/v1/batch/{batch_outpoint.txid}/{batch_outpoint.vout}/tree"
    };
  };

  // GetVtxoTreeLeaves returns the list of leaves (vtxo outpoints) of the tree(s) for the
  // provided batch outpoint.
  // The response may be paginated if the results span multiple pages.
  rpc GetVtxoTreeLeaves(GetVtxoTreeLeavesRequest) returns (GetVtxoTreeLeavesResponse) {
    option (google.api.http) = {
      get: "/v1/batch/{batch_outpoint.txid}/{batch_outpoint.vout}/tree/leaves"
    };
  };

  // GetVtxos returns the list of vtxos based on the provided filter. Vtxos can be retrieved either
  // by addresses or by outpoints, and optionally filtered by spendable or spent only.
  // The response may be paginated if the results span multiple pages.
  rpc GetVtxos(GetVtxosRequest) returns (GetVtxosResponse) {
    option (google.api.http) = {
      get: "/v1/vtxos"
    };
  };

  
  // GetTransactionHistory returns the list of transactions for the provided address.
  // The tx history can be filtered by defining a start and/or end time.
  // The response may be paginated if the results span multiple pages.
  rpc GetTransactionHistory(GetTransactionHistoryRequest) returns (GetTransactionHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/history/{address}"
    };
  };
  
  // GetVtxoChain returns the the chain of ark txs that starts from spending any vtxo leaf and ends
  // with the creation of the provided vtxo outpoint.
  // The response may be paginated if the results span multiple pages.
  rpc GetVtxoChain(GetVtxoChainRequest) returns (GetVtxoChainResponse) {
    option (google.api.http) = {
      get: "/v1/vtxo/{outpoint.txid}/{outpoint.vout}/chain"
    };
  }

  // GetVirtualTxs returns the virtual transactions in hex format for the specified txids.
  // The response may be paginated if the results span multiple pages.
  rpc GetVirtualTxs(GetVirtualTxsRequest) returns (GetVirtualTxsResponse) {
    option (google.api.http) = {
      get: "/v1/virtualTx/{txids}"
    };
  }

  // GetSweptCommitmentTx returns the list of transaction (txid) that swept each batch output
  // of the specified commitment transaction.
  // In most cases the list contains only one txid per batch, that means the funds locked in the
  // batch output have been claimed back.
  // If any of the leaves of the tree (vtxo) have been unrolled onchain before the expiration, the
  // list will contain many txids.
  // In a binary tree with 4 or more leaves, 1 unroll causes the server to broadcast 3 txs to sweep
  // the whole tree for example.
  // If a whole vtxo tree has been unrolled onchain, the list of txids for that batch output is be
  //empty.
  rpc GetSweptCommitmentTx(GetSweptCommitmentTxRequest) returns (GetSweptCommitmentTxResponse) {
    option (google.api.http) = {
      get: "/v1/commitmentTx/{txid}/swept"
    };
  }

  // SubscribeForScripts allows to subscribe for tx notifications related to the provided vtxo
  // scripts. It can also be used to update an existing subscribtion by adding new scripts to it.
  rpc SubscribeForScripts(SubscribeForScriptsRequest) returns (SubscribeForScriptsResponse) {
    option (google.api.http) = {
      post: "/v1/script/subscribe"
      body: "*"
    };
  };

  // UnsubscribeForScripts allows to remove scripts from an existing subscription.
  rpc UnsubscribeForScripts(UnsubscribeForScriptsRequest) returns (UnsubscribeForScriptsResponse) {
    option (google.api.http) = {
      post: "/v1/script/unsubscribe"
      body: "*"
    };
  };

  
  // GetSubscription is a server-side streaming RPC which allows clients to receive real-time
  // notifications on transactions related to the subscribed vtxo scripts.
  // The subscription can be created or updated by using the SubscribeForScripts and 
  // UnsubscribeForScripts RPCs.
  rpc GetSubscription(GetSubscriptionRequest) returns (stream GetSubscriptionResponse) {
    option (google.api.http) = {
      get: "/v1/script/subscription/{subscription_id}"
    };
  };
}

message GetCommitmentTxRequest {
  string txid = 1;
}
message GetCommitmentTxResponse {
  int64 started_at = 1;
  int64 ended_at = 2;
  map<uint32, IndexerBatch> batches = 3;
  uint64 total_input_amount = 4;
  int32 total_input_vtxos = 5;
  uint64 total_output_amount = 6;
  int32 total_output_vtxos = 7;
}

message GetForfeitTxsRequest {
  string txid = 1;
  IndexerPageRequest page = 2;
}
message GetForfeitTxsResponse {
  repeated string txids = 1;
  IndexerPageResponse page = 2;
}

message GetConnectorsRequest {
  string txid = 1;
  IndexerPageRequest page = 2;
}
message GetConnectorsResponse {
  repeated IndexerNode connectors = 1;
  IndexerPageResponse page = 2;
}

message GetCommitmentTxLeavesRequest {
  string txid = 1;
  IndexerPageRequest page = 2;
}
message GetCommitmentTxLeavesResponse {
  repeated IndexerOutpoint leaves = 1;
  IndexerPageResponse page = 2;
}

message GetVtxoTreeRequest {
  IndexerOutpoint batch_outpoint = 1;
  IndexerPageRequest page = 2;
}
message GetVtxoTreeResponse {
  repeated IndexerNode vtxo_tree = 1;
  IndexerPageResponse page = 2;
}

message GetVtxoTreeLeavesRequest {
  IndexerOutpoint batch_outpoint = 1;
  IndexerPageRequest page = 2;
}
message GetVtxoTreeLeavesResponse {
  repeated IndexerOutpoint leaves = 1;
  IndexerPageResponse page = 2;
}

message GetVtxosRequest {
  // Either specify a list of addresses to list the vtxos for
  repeated string addresses = 1;
  // Or specify a list of outpoints. The 2 filters are mutually exclusive
  repeated string outpoints = 2;
  // Retrieve only spendable vtxos
  bool spendable_only = 3;
  // Retrieve only spendable vtxos. The 2 filters are mutually exclusive
  bool spent_only = 4;
  IndexerPageRequest page = 5;
}
message GetVtxosResponse {
  repeated IndexerVtxo vtxos = 1;
  IndexerPageResponse page = 2;
}

message GetTransactionHistoryRequest {
  string address = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  IndexerPageRequest page = 4;
}
message GetTransactionHistoryResponse {
  repeated IndexerTxHistoryRecord history = 1;
  IndexerPageResponse page = 2;
}

message GetVtxoChainRequest {
  IndexerOutpoint outpoint = 1;
  IndexerPageRequest page = 2;
}
message GetVtxoChainResponse {
  repeated IndexerChain chain = 1;
  int32 depth = 2;
  string root_commitment_txid = 3;
  IndexerPageResponse page = 4;
}

message GetVirtualTxsRequest {
  repeated string txids = 1;
  IndexerPageRequest page = 2;
}
message GetVirtualTxsResponse {
  repeated string txs = 1;
  IndexerPageResponse page = 2;
}

message GetSweptCommitmentTxRequest {
  string txid = 1;
}
message GetSweptCommitmentTxResponse {
  repeated string swept_by = 1;
}

message IndexerBatch {
  uint64 total_output_amount = 1;
  int32 total_output_vtxos = 2;
  int64 expires_at = 3;
  bool swept = 4;
}

message IndexerOutpoint {
  string txid = 1;
  uint32 vout = 2;
}

message IndexerNode {
  string txid = 1;
  map<uint32, string> children = 2; // vout -> txid
}

message IndexerVtxo {
  IndexerOutpoint outpoint = 1;
  int64 created_at = 2;
  int64 expires_at = 3;
  uint64 amount = 4;
  string script = 5;
  bool is_preconfirmed = 6;
  bool is_swept = 7;
  bool is_redeemed = 8;
  bool is_spent = 9;
  string spent_by = 10;
  string commitment_txid = 11;
}

message IndexerChain {
  string txid = 1;
  repeated IndexerChainedTx spends = 2;
  int64 expires_at = 3;
}

message IndexerChainedTx {
  string txid = 1;
  IndexerChainedTxType type = 2;
}

message IndexerTxHistoryRecord {
  oneof key {
    string commitment_txid = 1;
    string virtual_txid = 2;
  }
  IndexerTxType type = 3;
  uint64 amount = 4;
  int64 created_at = 5;
  bool is_settled = 6;
  string settled_by = 7;
}

enum IndexerTxType {
  INDEXER_TX_TYPE_UNSPECIFIED = 0;
  INDEXER_TX_TYPE_RECEIVED = 1;
  INDEXER_TX_TYPE_SENT = 2;
}

enum IndexerChainedTxType {
  INDEXER_CHAINED_TX_TYPE_UNSPECIFIED = 0;
  INDEXER_CHAINED_TX_TYPE_VIRTUAL = 1;
  INDEXER_CHAINED_TX_TYPE_COMMITMENT = 2;
}

message IndexerPageRequest {
  int32 size = 1;
  int32 index = 2;
}

message IndexerPageResponse {
  int32 current = 1;
  int32 next = 2;
  int32 total = 3;
}

message SubscribeForScriptsRequest {
  repeated string scripts = 1;
  // If set, update an existing subscription
  string subscription_id = 2;
}

message SubscribeForScriptsResponse {
  string subscription_id = 1;
}

message UnsubscribeForScriptsRequest {
  string subscription_id = 1;
  // If empty, unsubscribe all scripts
  repeated string scripts = 2; 
}

message UnsubscribeForScriptsResponse {}

message GetSubscriptionRequest {
  string subscription_id = 1;
}

message GetSubscriptionResponse {
  string txid = 1;
  repeated string scripts = 2;
  repeated IndexerVtxo new_vtxos = 3;
  repeated IndexerVtxo spent_vtxos = 4;
}