syntax = "proto3";

package ark.v1;

import "google/api/annotations.proto";
import "ark/v1/types.proto";

service ArkService {
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }
  rpc GetBoardingAddress(GetBoardingAddressRequest) returns (GetBoardingAddressResponse) {
    option (google.api.http) = {
      post: "/v1/boarding"
      body: "*"
    };
  };

  /* Batch APIs */

  rpc RegisterInputsForNextBatch(RegisterInputsForNextBatchRequest) returns (RegisterInputsForNextBatchResponse) {
    option (google.api.http) = {
      post: "/v1/batch/registerInputs"
      body: "*"
    };
  };
  rpc RegisterOutputsForNextBatch(RegisterOutputsForNextBatchRequest) returns (RegisterOutputsForNextBatchResponse) {
    option (google.api.http) = {
      post: "/v1/batch/registerOutputs"
      body: "*"
    };
  };
  rpc SubmitTreeNonces(SubmitTreeNoncesRequest) returns (SubmitTreeNoncesResponse) {
    option (google.api.http) = {
      post: "/v1/batch/tree/submitNonces"
      body: "*"
    };
  }
  rpc SubmitTreeSignatures(SubmitTreeSignaturesRequest) returns (SubmitTreeSignaturesResponse) {
    option (google.api.http) = {
      post: "/v1/batch/tree/submitSignatures"
      body: "*"
    };
  }
  rpc SubmitSignedForfeitTxs(SubmitSignedForfeitTxsRequest) returns (SubmitSignedForfeitTxsResponse) {
    option (google.api.http) = {
      post: "/v1/batch/submitForfeitTxs"
      body: "*"
    };
  };
  rpc GetBatchEventStream(GetBatchEventStreamRequest) returns (stream GetBatchEventStreamResponse) {
    option (google.api.http) = {
      get: "/v1/batch/events"
    };
  };
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/batch/ping/{request_id}"
    };
  };

  /* Ark Transaction APIs */

  rpc SubmitTx(SubmitTxRequest) returns (SubmitTxResponse) {
    option (google.api.http) = {
      post: "/v1/submitTx"
      body: "*"
    };
  }
}

message GetInfoRequest {}
message GetInfoResponse {
  string pubkey = 1;
  int64 vtxo_tree_expiry = 2;
  int64 unilateral_exit_delay = 3;
  int64 batch_interval = 4;
  string network = 5;
  int64 dust = 6;
  string boarding_descriptor_template = 7;
  repeated string vtxo_descriptor_templates = 8;
  string forfeit_address = 9;
  MarketHour market_hour = 10;
  string version = 11;
}

message GetBoardingAddressRequest {
  string pubkey = 1;
}
message GetBoardingAddressResponse {
  string address = 1;
  oneof taproot_tree {
    Tapscripts tapscripts = 3;
  }
}

/* Batch API messages */

message RegisterInputsForNextBatchRequest {
  // Tapscripts aims to reveal the taproot tree of the unspent & unexpired VTXOs.
  map<string, Tapscripts> tapscripts = 1; 
  // BIP322 signature embeds the outpoints and the proof of funds
  Bip322Signature bip322_signature = 2;
  repeated string notes = 3;
}

message RegisterInputsForNextBatchResponse {
  string request_id = 1;
}

message Musig2 {
  repeated string cosigners_public_keys = 1;
  bool signing_all = 2;
}

message RegisterOutputsForNextBatchRequest {
  string request_id = 1;
  // List of receivers for to convert to leaves in the next VTXO tree. 
  repeated Output outputs = 2;
  optional Musig2 musig2 = 3;
}
message RegisterOutputsForNextBatchResponse {}

message SubmitTreeNoncesRequest {
  string batch_id = 1;
  string pubkey = 2;
  string tree_nonces = 3;
}
message SubmitTreeNoncesResponse {}

message SubmitTreeSignaturesRequest {
  string batch_id = 1;
  string pubkey = 2;
  string tree_signatures = 3;
}
message SubmitTreeSignaturesResponse {}

message SubmitSignedForfeitTxsRequest {
  // Forfeit txs signed by the user. 
  repeated string signed_forfeit_txs = 1;
  // The user has to sign also the commitment tx if he registerd a boarding UTXO.
  optional string signed_commitment_tx = 2;
}
message SubmitSignedForfeitTxsResponse {}

message GetBatchEventStreamRequest {}
message GetBatchEventStreamResponse {
  oneof event {
    BatchFinalizationEvent batch_finalization = 1;
    BatchFinalizedEvent batch_finalized = 2;
    BatchFailedEvent batch_failed = 3;
    TreeSigningStartedEvent tree_signing_started = 4;
    TreeNoncesAggregatedEvent tree_nonces_aggregated = 5; 
  }
}

message PingRequest {
  // The id used to register inputs and ouptuts.
  string request_id = 1;
}
message PingResponse {}

/* Ark Transaction API messages */

message SubmitTxRequest {
  string tx = 1;
}
message SubmitTxResponse {
  string signed_tx = 1;
  string txid = 2;
}