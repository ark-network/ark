syntax = "proto3";

package ark.v1;

import "google/api/annotations.proto";
import "ark/v1/types.proto";

service ArkService {
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }

  /* Batch APIs */

  rpc RegisterIntent(RegisterIntentRequest) returns (RegisterIntentResponse) {
    option (google.api.http) = {
      post: "/v1/batch/registerIntent"
      body: "*"
    };
  };
  rpc SubmitTreeNonces(SubmitTreeNoncesRequest) returns (SubmitTreeNoncesResponse) {
    option (google.api.http) = {
      post: "/v1/batch/tree/submitNonces"
      body: "*"
    };
  }
  rpc SubmitTreeSignatures(SubmitTreeSignaturesRequest) returns (SubmitTreeSignaturesResponse) {
    option (google.api.http) = {
      post: "/v1/batch/tree/submitSignatures"
      body: "*"
    };
  }
  rpc SubmitSignedForfeitTxs(SubmitSignedForfeitTxsRequest) returns (SubmitSignedForfeitTxsResponse) {
    option (google.api.http) = {
      post: "/v1/batch/submitForfeitTxs"
      body: "*"
    };
  };
  rpc GetBatchEventStream(GetBatchEventStreamRequest) returns (stream GetBatchEventStreamResponse) {
    option (google.api.http) = {
      get: "/v1/batch/{batch_id}/events"
    };
  };
  rpc ConfirmRegistration(ConfirmRegistrationRequest) returns (ConfirmRegistrationResponse) {
    option (google.api.http) = {
      post: "/v1/batch/{intent_id}/ack"
    };
  };
  rpc RegisterBlindedOutputs(RegisterBlindedOutputsRequest) returns (RegisterBlindedOutputsResponse) {
    option (google.api.http) = {
      post: "/v1/batch/registerOutputs"
      body: "*"
    };
  };

  /* Ark Transaction APIs */

  rpc SubmitTx(SubmitTxRequest) returns (SubmitTxResponse) {
    option (google.api.http) = {
      post: "/v1/submitTx"
      body: "*"
    };
  }
  rpc SubmitCheckpointTxs(SubmitCheckpointTxsRequest) returns (SubmitCheckpointTxsResponse) {
    option (google.api.http) = {
      post: "/v1/submitCheckpointTxs"
      body: "*"
    };
  }
}

message GetInfoRequest {}
message GetInfoResponse {
  string pubkey = 1;
  int64 batch_expiry = 2;
  int64 unilateral_exit_delay = 3;
  int64 round_interval = 4;
  string network = 5;
  int64 dust = 6;
  string boarding_template = 7;
  MarketHour market_hour = 8;
  string version = 9;
}

message GetBoardingAddressRequest {
  string pubkey = 1;
}
message GetBoardingAddressResponse {
  string address = 1;
  oneof taproot_tree {
    Tapscripts tapscripts = 3;
  }
}

/* Batch API messages */

message RegisterIntentRequest {
  // Tapscripts aims to reveal the taproot tree of the unspent & unexpired VTXOs.
  map<string, Tapscripts> tapscripts = 1; 
  // The BIP322 signature contains the outpoints that are gonna be forfeit and the outputs to be added in the new tree.
  Bip322Signature bip322_signature = 2;
  repeated string notes = 3;
}

message RegisterIntentResponse {
  string intent_id = 1;
}

message Musig2 {
  repeated string cosigners_public_keys = 1;
  bool signing_all = 2;
}

message SubmitTreeNoncesRequest {
  string batch_id = 1;
  string pubkey = 2;
  string tree_nonces = 3;
}
message SubmitTreeNoncesResponse {}

message SubmitTreeSignaturesRequest {
  string batch_id = 1;
  string pubkey = 2;
  string tree_signatures = 3;
}
message SubmitTreeSignaturesResponse {}

message SubmitSignedForfeitTxsRequest {
  string batch_id = 1;
  // Forfeit txs signed by the user. 
  repeated string signed_forfeit_txs = 2;
  // The user has to sign also the commitment tx if he registerd a boarding UTXO.
  string signed_commitment_tx = 3;
}
message SubmitSignedForfeitTxsResponse {}

message GetBatchEventStreamRequest {
  string batch_id = 1;
  repeated string topics = 2;
}
message GetBatchEventStreamResponse {
  oneof event {
    BatchStartedEvent batch_started = 1;
    BatchVtxoTreeEvent tree_tx = 2;
    BatchConnectorTreeEvent connector_tx = 3;
    BatchFinalizationEvent batch_finalization = 4;
    BatchFinalizedEvent batch_finalized = 5;
    BatchFailedEvent batch_failed = 6;
    TreeSigningStartedEvent tree_signing_started = 7;
    TreeNoncesAggregatedEvent tree_nonces_aggregated = 8; 
  }
}

message ConfirmRegistrationRequest {
  // The id returne dby the server when registering the intent.
  string intent_id = 1;
}
message ConfirmRegistrationResponse {
  string blinded_cred = 1;
}

message RegisterBlindedOutputsRequest {
  string blinded_cred = 1;
  repeated Output vtxos = 2;
}
message RegisterBlindedOutputsResponse {
  string blinded_cred = 1;
}

/* Ark Transaction API messages */

message SubmitTxRequest {
  string partial_signed_tx = 1;
  repeated string unsigned_checkpoint_txs = 2;
}
message SubmitTxResponse {
  repeated string partial_signed_checkpoint_txs = 3;
}

message SubmitCheckpointTxsRequest {
  repeated string fully_signed_checkpoint_txs = 1;
}
message SubmitCheckpointTxsResponse {
  string fully_signed_tx = 1;
}