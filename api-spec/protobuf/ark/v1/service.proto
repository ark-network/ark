syntax = "proto3";

package ark.v1;

import "google/api/annotations.proto";
import "ark/v1/types.proto";

service ArkService {
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }
  rpc GetBoardingAddress(GetBoardingAddressRequest) returns (GetBoardingAddressResponse) {
    option (google.api.http) = {
      post: "/v1/boarding"
      body: "*"
    };
  };

  /* In-Round Transaction APIs */

  rpc RegisterInputsForNextRound(RegisterInputsForNextRoundRequest) returns (RegisterInputsForNextRoundResponse) {
    option (google.api.http) = {
      post: "/v1/round/registerInputs"
      body: "*"
    };
  };
  rpc RegisterOutputsForNextRound(RegisterOutputsForNextRoundRequest) returns (RegisterOutputsForNextRoundResponse) {
    option (google.api.http) = {
      post: "/v1/round/registerOutputs"
      body: "*"
    };
  };
  rpc SubmitTreeNonces(SubmitTreeNoncesRequest) returns (SubmitTreeNoncesResponse) {
    option (google.api.http) = {
      post: "/v1/round/tree/submitNonces"
      body: "*"
    };
  }
  rpc SubmitTreeSignatures(SubmitTreeSignaturesRequest) returns (SubmitTreeSignaturesResponse) {
    option (google.api.http) = {
      post: "/v1/round/tree/submitSignatures"
      body: "*"
    };
  }
  rpc SubmitSignedForfeitTxs(SubmitSignedForfeitTxsRequest) returns (SubmitSignedForfeitTxsResponse) {
    option (google.api.http) = {
      post: "/v1/round/submitForfeitTxs"
      body: "*"
    };
  };
  rpc GetEventStream(GetEventStreamRequest) returns (stream GetEventStreamResponse) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  };
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/round/ping/{request_id}"
    };
  };

  /* Out-of-Round Transaction APIs */

  rpc SubmitRedeemTx(SubmitRedeemTxRequest) returns (SubmitRedeemTxResponse) {
    option (google.api.http) = {
      post: "/v1/redeem-tx"
      body: "*"
    };
  }

  /* Nostr APIs */

  rpc GetTransactionsStream(GetTransactionsStreamRequest) returns (stream GetTransactionsStreamResponse) {
    option (google.api.http) = {
      get: "/v1/transactions"
    };
  }
  rpc SetNostrRecipient(SetNostrRecipientRequest) returns (SetNostrRecipientResponse) {
    option (google.api.http) = {
      post: "/v1/vtxo/nostr"
      body: "*"
    };
  }
  rpc DeleteNostrRecipient(DeleteNostrRecipientRequest) returns (DeleteNostrRecipientResponse) {
    option (google.api.http) = {
      post: "/v1/vtxo/nostr/delete"
      body: "*"
    };
  }
}

message GetInfoRequest {}
message GetInfoResponse {
  string pubkey = 1;
  int64 vtxo_tree_expiry = 2;
  int64 unilateral_exit_delay = 3;
  int64 round_interval = 4;
  string network = 5;
  int64 dust = 6;
  string boarding_descriptor_template = 7;
  repeated string vtxo_descriptor_templates = 8;
  string forfeit_address = 9;
  MarketHour market_hour = 10;
}

message GetBoardingAddressRequest {
  string pubkey = 1;
}
message GetBoardingAddressResponse {
  string address = 1;
  oneof taproot_tree {
    string descriptor = 2;
    Tapscripts tapscripts = 3;
  }
}

/* In-Round Transaction API messages */

message RegisterInputsForNextRoundRequest {
  repeated Input inputs = 1;
  optional string ephemeral_pubkey = 2;
  repeated string notes = 3;
}
message RegisterInputsForNextRoundResponse {
  string request_id = 1;
}

message RegisterOutputsForNextRoundRequest {
  string request_id = 1;
  // List of receivers for to convert to leaves in the next VTXO tree. 
  repeated Output outputs = 2;
}
message RegisterOutputsForNextRoundResponse {}

message SubmitTreeNoncesRequest {
  string round_id = 1;
  string pubkey = 2;
  string tree_nonces = 3;
}
message SubmitTreeNoncesResponse {}

message SubmitTreeSignaturesRequest {
  string round_id = 1;
  string pubkey = 2;
  string tree_signatures = 3;
}
message SubmitTreeSignaturesResponse {}

message SubmitSignedForfeitTxsRequest {
  // Forfeit txs signed by the user. 
  repeated string signed_forfeit_txs = 1;
  // The user has to sign also the round tx if he registerd a boarding UTXO.
  optional string signed_round_tx = 2;
}
message SubmitSignedForfeitTxsResponse {}

message GetEventStreamRequest {}
message GetEventStreamResponse {
  oneof event {
    RoundFinalizationEvent round_finalization = 1;
    RoundFinalizedEvent round_finalized = 2;
    RoundFailed round_failed = 3;
    RoundSigningEvent round_signing = 4;
    RoundSigningNoncesGeneratedEvent round_signing_nonces_generated = 5; 
  }
}

message PingRequest {
  // The id used to register inputs and ouptuts.
  string request_id = 1;
}
message PingResponse {}

/* Out-of-Round Transaction API messages */

message SubmitRedeemTxRequest {
  string redeem_tx = 1;
}
message SubmitRedeemTxResponse {
  string signed_redeem_tx = 1;
}

message GetTransactionsStreamRequest {}
message GetTransactionsStreamResponse {
  oneof tx {
    RoundTransaction round = 1;
    RedeemTransaction redeem = 2;
  }
}

message SetNostrRecipientRequest {
  string nostr_recipient = 1;
  repeated SignedVtxoOutpoint vtxos = 2;
}
message SetNostrRecipientResponse {}

message DeleteNostrRecipientRequest {
  repeated SignedVtxoOutpoint vtxos = 1;
}
message DeleteNostrRecipientResponse {}