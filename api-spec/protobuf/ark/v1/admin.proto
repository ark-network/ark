syntax = "proto3";

package ark.v1;

import "google/api/annotations.proto";
import "ark/v1/types.proto";

service AdminService {
  rpc GetScheduledSweep(GetScheduledSweepRequest) returns (GetScheduledSweepResponse) {
    option (google.api.http) = {
      get: "/v1/admin/sweeps"
    };
  }
  rpc GetRoundDetails(GetRoundDetailsRequest) returns (GetRoundDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/admin/round/{round_id}"
    };
  }
  rpc GetRounds(GetRoundsRequest) returns (GetRoundsResponse) {
    option (google.api.http) = {
      post: "/v1/admin/rounds"
      body: "*"
    };
  }
  rpc CreateNote(CreateNoteRequest) returns (CreateNoteResponse) {
    option (google.api.http) = {
      post: "/v1/admin/note"
      body: "*"
    };
  }
  rpc GetMarketHourConfig(GetMarketHourConfigRequest) returns (GetMarketHourConfigResponse) {
    option (google.api.http) = {
      get: "/v1/admin/marketHour"
    };
  }
  rpc UpdateMarketHourConfig(UpdateMarketHourConfigRequest) returns (UpdateMarketHourConfigResponse) {
    option (google.api.http) = {
      post: "/v1/admin/marketHour"
      body: "*"
    };
  }
  rpc ListIntents(ListIntentsRequest) returns (ListIntentsResponse) {
    option (google.api.http) = {
      get: "/v1/admin/intents"
    };
  }
  rpc DeleteIntents(DeleteIntentsRequest) returns (DeleteIntentsResponse) {
    option (google.api.http) = {
      post: "/v1/admin/intents/delete"
      body: "*"
    };
  }
}

message GetScheduledSweepRequest {}
message GetScheduledSweepResponse {
  repeated ScheduledSweep sweeps = 1;
}

message GetRoundDetailsRequest {
  string round_id = 1;
}
message GetRoundDetailsResponse {
  string round_id = 1;
  string commitment_txid = 2;
  string forfeited_amount = 3;
  string total_vtxos_amount = 4;
  string total_exit_amount = 5;
  string total_fee_amount = 6;
  repeated string inputs_vtxos = 7;
  repeated string outputs_vtxos = 8;
  repeated string exit_addresses = 9;
}

message GetRoundsRequest {
  int64 after = 1;
  int64 before = 2;
}
message GetRoundsResponse {
  repeated string rounds = 1;
}

message CreateNoteRequest {
  uint32 amount = 1;
  uint32 quantity = 2;
}
message CreateNoteResponse {
  repeated string notes = 1;
}

message GetMarketHourConfigRequest {}
message GetMarketHourConfigResponse {
  MarketHourConfig config = 1;
}

message UpdateMarketHourConfigRequest {
  MarketHourConfig config = 1;
}
message UpdateMarketHourConfigResponse {}

message ListIntentsRequest {
  repeated string intent_ids = 1;
}
message ListIntentsResponse {
  repeated IntentInfo intents = 1;
}

message DeleteIntentsRequest {
  repeated string intent_ids = 1;
}
message DeleteIntentsResponse {}

message SweepableOutput {
  string txid = 1;
  uint32 vout = 2;
  string amount = 3;
  int64 scheduled_at = 4;
}

message ScheduledSweep {
  string round_id = 1;
  repeated SweepableOutput outputs = 2;
}

message MarketHourConfig {
  int64 start_time = 1;
  int64 end_time = 2;
  int64 period = 3;
  int64 round_interval = 4;
}

message IntentInput {
  string txid = 1;
  uint32 vout = 2;
  uint64 amount = 3;
}

message IntentInfo {
  string id = 1;
  int64 created_at = 2;
  repeated Output receivers = 3;
  repeated IntentInput inputs = 4;
  repeated IntentInput boarding_inputs = 5;
  repeated string cosigners_public_keys = 6;
  Bip322Signature proof = 7;
}