// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package arkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexerServiceClient is the client API for IndexerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerServiceClient interface {
	// GetCommitmentTx returns information about a specific commitment transaction identified by the
	// provided txid.
	GetCommitmentTx(ctx context.Context, in *GetCommitmentTxRequest, opts ...grpc.CallOption) (*GetCommitmentTxResponse, error)
	// GetForfeitTxs returns the list of forfeit transactions that were submitted for the provided
	// commitment transaction.
	// The response may include pagination information if the results span multiple pages.
	GetForfeitTxs(ctx context.Context, in *GetForfeitTxsRequest, opts ...grpc.CallOption) (*GetForfeitTxsResponse, error)
	// GetConnectors returns the tree of connectors for the provided commitment transaction.
	// The response includes a list of connector txs with details on the tree posistion and may
	// include pagination information if the results span multiple pages.
	GetConnectors(ctx context.Context, in *GetConnectorsRequest, opts ...grpc.CallOption) (*GetConnectorsResponse, error)
	// GetCommitmentTxLeaves returns the list of leaves (vtxo outpoints) of all batch outputs' trees
	// included in the provided commitment transaction.
	// The response may include pagination information if the results span multiple pages.
	GetCommitmentTxLeaves(ctx context.Context, in *GetCommitmentTxLeavesRequest, opts ...grpc.CallOption) (*GetCommitmentTxLeavesResponse, error)
	// GetVtxoTree returns the vtxo tree for the provided batch outpoint.
	// The response includes a list of txs with details on the tree posistion and may
	// include pagination information if the results span multiple pages.
	GetVtxoTree(ctx context.Context, in *GetVtxoTreeRequest, opts ...grpc.CallOption) (*GetVtxoTreeResponse, error)
	// GetVtxoTreeLeaves returns the list of leaves (vtxo outpoints) of the tree(s) for the
	// provided batch outpoint.
	// The response may be paginated if the results span multiple pages.
	GetVtxoTreeLeaves(ctx context.Context, in *GetVtxoTreeLeavesRequest, opts ...grpc.CallOption) (*GetVtxoTreeLeavesResponse, error)
	// GetVtxos returns the list of vtxos based on the provided filter. Vtxos can be retrieved either
	// by addresses or by outpoints, and optionally filtered by spendable or spent only.
	// The response may be paginated if the results span multiple pages.
	GetVtxos(ctx context.Context, in *GetVtxosRequest, opts ...grpc.CallOption) (*GetVtxosResponse, error)
	// GetTransactionHistory returns the list of transactions for the provided address.
	// The tx history can be filtered by defining a start and/or end time.
	// The response may be paginated if the results span multiple pages.
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	// GetVtxoChain returns the the chain of ark txs that starts from spending any vtxo leaf and ends
	// with the creation of the provided vtxo outpoint.
	// The response may be paginated if the results span multiple pages.
	GetVtxoChain(ctx context.Context, in *GetVtxoChainRequest, opts ...grpc.CallOption) (*GetVtxoChainResponse, error)
	// GetVirtualTxs returns the virtual transactions in hex format for the specified txids.
	// The response may be paginated if the results span multiple pages.
	GetVirtualTxs(ctx context.Context, in *GetVirtualTxsRequest, opts ...grpc.CallOption) (*GetVirtualTxsResponse, error)
	// GetSweptCommitmentTx returns the list of transaction (txid) that swept each batch output
	// of the specified commitment transaction.
	// In most cases the list contains only one txid per batch, that means the funds locked in the
	// batch output have been claimed back.
	// If any of the leaves of the tree (vtxo) have been unrolled onchain before the expiration, the
	// list will contain many txids.
	// In a binary tree with 4 or more leaves, 1 unroll causes the server to broadcast 3 txs to sweep
	// the whole tree for example.
	// If a whole vtxo tree has been unrolled onchain, the list of txids for that batch output is be
	// empty.
	GetSweptCommitmentTx(ctx context.Context, in *GetSweptCommitmentTxRequest, opts ...grpc.CallOption) (*GetSweptCommitmentTxResponse, error)
	// SubscribeForScripts allows to subscribe for tx notifications related to the provided vtxo
	// scripts. It can also be used to update an existing subscribtion by adding new scripts to it.
	SubscribeForScripts(ctx context.Context, in *SubscribeForScriptsRequest, opts ...grpc.CallOption) (*SubscribeForScriptsResponse, error)
	// UnsubscribeForScripts allows to remove scripts from an existing subscription.
	UnsubscribeForScripts(ctx context.Context, in *UnsubscribeForScriptsRequest, opts ...grpc.CallOption) (*UnsubscribeForScriptsResponse, error)
	// GetSubscription is a server-side streaming RPC which allows clients to receive real-time
	// notifications on transactions related to the subscribed vtxo scripts.
	// The subscription can be created or updated by using the SubscribeForScripts and
	// UnsubscribeForScripts RPCs.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (IndexerService_GetSubscriptionClient, error)
}

type indexerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerServiceClient(cc grpc.ClientConnInterface) IndexerServiceClient {
	return &indexerServiceClient{cc}
}

func (c *indexerServiceClient) GetCommitmentTx(ctx context.Context, in *GetCommitmentTxRequest, opts ...grpc.CallOption) (*GetCommitmentTxResponse, error) {
	out := new(GetCommitmentTxResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetCommitmentTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetForfeitTxs(ctx context.Context, in *GetForfeitTxsRequest, opts ...grpc.CallOption) (*GetForfeitTxsResponse, error) {
	out := new(GetForfeitTxsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetForfeitTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetConnectors(ctx context.Context, in *GetConnectorsRequest, opts ...grpc.CallOption) (*GetConnectorsResponse, error) {
	out := new(GetConnectorsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetCommitmentTxLeaves(ctx context.Context, in *GetCommitmentTxLeavesRequest, opts ...grpc.CallOption) (*GetCommitmentTxLeavesResponse, error) {
	out := new(GetCommitmentTxLeavesResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetCommitmentTxLeaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVtxoTree(ctx context.Context, in *GetVtxoTreeRequest, opts ...grpc.CallOption) (*GetVtxoTreeResponse, error) {
	out := new(GetVtxoTreeResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVtxoTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVtxoTreeLeaves(ctx context.Context, in *GetVtxoTreeLeavesRequest, opts ...grpc.CallOption) (*GetVtxoTreeLeavesResponse, error) {
	out := new(GetVtxoTreeLeavesResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVtxoTreeLeaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVtxos(ctx context.Context, in *GetVtxosRequest, opts ...grpc.CallOption) (*GetVtxosResponse, error) {
	out := new(GetVtxosResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetTransactionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVtxoChain(ctx context.Context, in *GetVtxoChainRequest, opts ...grpc.CallOption) (*GetVtxoChainResponse, error) {
	out := new(GetVtxoChainResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVtxoChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVirtualTxs(ctx context.Context, in *GetVirtualTxsRequest, opts ...grpc.CallOption) (*GetVirtualTxsResponse, error) {
	out := new(GetVirtualTxsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVirtualTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetSweptCommitmentTx(ctx context.Context, in *GetSweptCommitmentTxRequest, opts ...grpc.CallOption) (*GetSweptCommitmentTxResponse, error) {
	out := new(GetSweptCommitmentTxResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetSweptCommitmentTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) SubscribeForScripts(ctx context.Context, in *SubscribeForScriptsRequest, opts ...grpc.CallOption) (*SubscribeForScriptsResponse, error) {
	out := new(SubscribeForScriptsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/SubscribeForScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) UnsubscribeForScripts(ctx context.Context, in *UnsubscribeForScriptsRequest, opts ...grpc.CallOption) (*UnsubscribeForScriptsResponse, error) {
	out := new(UnsubscribeForScriptsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/UnsubscribeForScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (IndexerService_GetSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndexerService_ServiceDesc.Streams[0], "/ark.v1.IndexerService/GetSubscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexerServiceGetSubscriptionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexerService_GetSubscriptionClient interface {
	Recv() (*GetSubscriptionResponse, error)
	grpc.ClientStream
}

type indexerServiceGetSubscriptionClient struct {
	grpc.ClientStream
}

func (x *indexerServiceGetSubscriptionClient) Recv() (*GetSubscriptionResponse, error) {
	m := new(GetSubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexerServiceServer is the server API for IndexerService service.
// All implementations should embed UnimplementedIndexerServiceServer
// for forward compatibility
type IndexerServiceServer interface {
	// GetCommitmentTx returns information about a specific commitment transaction identified by the
	// provided txid.
	GetCommitmentTx(context.Context, *GetCommitmentTxRequest) (*GetCommitmentTxResponse, error)
	// GetForfeitTxs returns the list of forfeit transactions that were submitted for the provided
	// commitment transaction.
	// The response may include pagination information if the results span multiple pages.
	GetForfeitTxs(context.Context, *GetForfeitTxsRequest) (*GetForfeitTxsResponse, error)
	// GetConnectors returns the tree of connectors for the provided commitment transaction.
	// The response includes a list of connector txs with details on the tree posistion and may
	// include pagination information if the results span multiple pages.
	GetConnectors(context.Context, *GetConnectorsRequest) (*GetConnectorsResponse, error)
	// GetCommitmentTxLeaves returns the list of leaves (vtxo outpoints) of all batch outputs' trees
	// included in the provided commitment transaction.
	// The response may include pagination information if the results span multiple pages.
	GetCommitmentTxLeaves(context.Context, *GetCommitmentTxLeavesRequest) (*GetCommitmentTxLeavesResponse, error)
	// GetVtxoTree returns the vtxo tree for the provided batch outpoint.
	// The response includes a list of txs with details on the tree posistion and may
	// include pagination information if the results span multiple pages.
	GetVtxoTree(context.Context, *GetVtxoTreeRequest) (*GetVtxoTreeResponse, error)
	// GetVtxoTreeLeaves returns the list of leaves (vtxo outpoints) of the tree(s) for the
	// provided batch outpoint.
	// The response may be paginated if the results span multiple pages.
	GetVtxoTreeLeaves(context.Context, *GetVtxoTreeLeavesRequest) (*GetVtxoTreeLeavesResponse, error)
	// GetVtxos returns the list of vtxos based on the provided filter. Vtxos can be retrieved either
	// by addresses or by outpoints, and optionally filtered by spendable or spent only.
	// The response may be paginated if the results span multiple pages.
	GetVtxos(context.Context, *GetVtxosRequest) (*GetVtxosResponse, error)
	// GetTransactionHistory returns the list of transactions for the provided address.
	// The tx history can be filtered by defining a start and/or end time.
	// The response may be paginated if the results span multiple pages.
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	// GetVtxoChain returns the the chain of ark txs that starts from spending any vtxo leaf and ends
	// with the creation of the provided vtxo outpoint.
	// The response may be paginated if the results span multiple pages.
	GetVtxoChain(context.Context, *GetVtxoChainRequest) (*GetVtxoChainResponse, error)
	// GetVirtualTxs returns the virtual transactions in hex format for the specified txids.
	// The response may be paginated if the results span multiple pages.
	GetVirtualTxs(context.Context, *GetVirtualTxsRequest) (*GetVirtualTxsResponse, error)
	// GetSweptCommitmentTx returns the list of transaction (txid) that swept each batch output
	// of the specified commitment transaction.
	// In most cases the list contains only one txid per batch, that means the funds locked in the
	// batch output have been claimed back.
	// If any of the leaves of the tree (vtxo) have been unrolled onchain before the expiration, the
	// list will contain many txids.
	// In a binary tree with 4 or more leaves, 1 unroll causes the server to broadcast 3 txs to sweep
	// the whole tree for example.
	// If a whole vtxo tree has been unrolled onchain, the list of txids for that batch output is be
	// empty.
	GetSweptCommitmentTx(context.Context, *GetSweptCommitmentTxRequest) (*GetSweptCommitmentTxResponse, error)
	// SubscribeForScripts allows to subscribe for tx notifications related to the provided vtxo
	// scripts. It can also be used to update an existing subscribtion by adding new scripts to it.
	SubscribeForScripts(context.Context, *SubscribeForScriptsRequest) (*SubscribeForScriptsResponse, error)
	// UnsubscribeForScripts allows to remove scripts from an existing subscription.
	UnsubscribeForScripts(context.Context, *UnsubscribeForScriptsRequest) (*UnsubscribeForScriptsResponse, error)
	// GetSubscription is a server-side streaming RPC which allows clients to receive real-time
	// notifications on transactions related to the subscribed vtxo scripts.
	// The subscription can be created or updated by using the SubscribeForScripts and
	// UnsubscribeForScripts RPCs.
	GetSubscription(*GetSubscriptionRequest, IndexerService_GetSubscriptionServer) error
}

// UnimplementedIndexerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndexerServiceServer struct {
}

func (UnimplementedIndexerServiceServer) GetCommitmentTx(context.Context, *GetCommitmentTxRequest) (*GetCommitmentTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitmentTx not implemented")
}
func (UnimplementedIndexerServiceServer) GetForfeitTxs(context.Context, *GetForfeitTxsRequest) (*GetForfeitTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForfeitTxs not implemented")
}
func (UnimplementedIndexerServiceServer) GetConnectors(context.Context, *GetConnectorsRequest) (*GetConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectors not implemented")
}
func (UnimplementedIndexerServiceServer) GetCommitmentTxLeaves(context.Context, *GetCommitmentTxLeavesRequest) (*GetCommitmentTxLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitmentTxLeaves not implemented")
}
func (UnimplementedIndexerServiceServer) GetVtxoTree(context.Context, *GetVtxoTreeRequest) (*GetVtxoTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtxoTree not implemented")
}
func (UnimplementedIndexerServiceServer) GetVtxoTreeLeaves(context.Context, *GetVtxoTreeLeavesRequest) (*GetVtxoTreeLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtxoTreeLeaves not implemented")
}
func (UnimplementedIndexerServiceServer) GetVtxos(context.Context, *GetVtxosRequest) (*GetVtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtxos not implemented")
}
func (UnimplementedIndexerServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedIndexerServiceServer) GetVtxoChain(context.Context, *GetVtxoChainRequest) (*GetVtxoChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtxoChain not implemented")
}
func (UnimplementedIndexerServiceServer) GetVirtualTxs(context.Context, *GetVirtualTxsRequest) (*GetVirtualTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualTxs not implemented")
}
func (UnimplementedIndexerServiceServer) GetSweptCommitmentTx(context.Context, *GetSweptCommitmentTxRequest) (*GetSweptCommitmentTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSweptCommitmentTx not implemented")
}
func (UnimplementedIndexerServiceServer) SubscribeForScripts(context.Context, *SubscribeForScriptsRequest) (*SubscribeForScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeForScripts not implemented")
}
func (UnimplementedIndexerServiceServer) UnsubscribeForScripts(context.Context, *UnsubscribeForScriptsRequest) (*UnsubscribeForScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeForScripts not implemented")
}
func (UnimplementedIndexerServiceServer) GetSubscription(*GetSubscriptionRequest, IndexerService_GetSubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}

// UnsafeIndexerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServiceServer will
// result in compilation errors.
type UnsafeIndexerServiceServer interface {
	mustEmbedUnimplementedIndexerServiceServer()
}

func RegisterIndexerServiceServer(s grpc.ServiceRegistrar, srv IndexerServiceServer) {
	s.RegisterService(&IndexerService_ServiceDesc, srv)
}

func _IndexerService_GetCommitmentTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitmentTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetCommitmentTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetCommitmentTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetCommitmentTx(ctx, req.(*GetCommitmentTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetForfeitTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForfeitTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetForfeitTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetForfeitTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetForfeitTxs(ctx, req.(*GetForfeitTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetConnectors(ctx, req.(*GetConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetCommitmentTxLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitmentTxLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetCommitmentTxLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetCommitmentTxLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetCommitmentTxLeaves(ctx, req.(*GetCommitmentTxLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVtxoTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVtxoTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVtxoTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVtxoTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVtxoTree(ctx, req.(*GetVtxoTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVtxoTreeLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVtxoTreeLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVtxoTreeLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVtxoTreeLeaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVtxoTreeLeaves(ctx, req.(*GetVtxoTreeLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVtxos(ctx, req.(*GetVtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetTransactionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVtxoChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVtxoChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVtxoChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVtxoChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVtxoChain(ctx, req.(*GetVtxoChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVirtualTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVirtualTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVirtualTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVirtualTxs(ctx, req.(*GetVirtualTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetSweptCommitmentTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSweptCommitmentTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetSweptCommitmentTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetSweptCommitmentTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetSweptCommitmentTx(ctx, req.(*GetSweptCommitmentTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_SubscribeForScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeForScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).SubscribeForScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/SubscribeForScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).SubscribeForScripts(ctx, req.(*SubscribeForScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_UnsubscribeForScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeForScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).UnsubscribeForScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/UnsubscribeForScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).UnsubscribeForScripts(ctx, req.(*UnsubscribeForScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServiceServer).GetSubscription(m, &indexerServiceGetSubscriptionServer{stream})
}

type IndexerService_GetSubscriptionServer interface {
	Send(*GetSubscriptionResponse) error
	grpc.ServerStream
}

type indexerServiceGetSubscriptionServer struct {
	grpc.ServerStream
}

func (x *indexerServiceGetSubscriptionServer) Send(m *GetSubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// IndexerService_ServiceDesc is the grpc.ServiceDesc for IndexerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ark.v1.IndexerService",
	HandlerType: (*IndexerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommitmentTx",
			Handler:    _IndexerService_GetCommitmentTx_Handler,
		},
		{
			MethodName: "GetForfeitTxs",
			Handler:    _IndexerService_GetForfeitTxs_Handler,
		},
		{
			MethodName: "GetConnectors",
			Handler:    _IndexerService_GetConnectors_Handler,
		},
		{
			MethodName: "GetCommitmentTxLeaves",
			Handler:    _IndexerService_GetCommitmentTxLeaves_Handler,
		},
		{
			MethodName: "GetVtxoTree",
			Handler:    _IndexerService_GetVtxoTree_Handler,
		},
		{
			MethodName: "GetVtxoTreeLeaves",
			Handler:    _IndexerService_GetVtxoTreeLeaves_Handler,
		},
		{
			MethodName: "GetVtxos",
			Handler:    _IndexerService_GetVtxos_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _IndexerService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "GetVtxoChain",
			Handler:    _IndexerService_GetVtxoChain_Handler,
		},
		{
			MethodName: "GetVirtualTxs",
			Handler:    _IndexerService_GetVirtualTxs_Handler,
		},
		{
			MethodName: "GetSweptCommitmentTx",
			Handler:    _IndexerService_GetSweptCommitmentTx_Handler,
		},
		{
			MethodName: "SubscribeForScripts",
			Handler:    _IndexerService_SubscribeForScripts_Handler,
		},
		{
			MethodName: "UnsubscribeForScripts",
			Handler:    _IndexerService_UnsubscribeForScripts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSubscription",
			Handler:       _IndexerService_GetSubscription_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ark/v1/indexer.proto",
}
