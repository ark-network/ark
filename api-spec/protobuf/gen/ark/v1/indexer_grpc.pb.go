// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package arkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexerServiceClient is the client API for IndexerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerServiceClient interface {
	GetCommitmentTx(ctx context.Context, in *GetCommitmentTxRequest, opts ...grpc.CallOption) (*GetCommitmentTxResponse, error)
	GetVtxoTree(ctx context.Context, in *GetVtxoTreeRequest, opts ...grpc.CallOption) (*GetVtxoTreeResponse, error)
	GetForfeitTxs(ctx context.Context, in *GetForfeitTxsRequest, opts ...grpc.CallOption) (*GetForfeitTxsResponse, error)
	GetConnectors(ctx context.Context, in *GetConnectorsRequest, opts ...grpc.CallOption) (*GetConnectorsResponse, error)
	GetSpendableVtxos(ctx context.Context, in *GetSpendableVtxosRequest, opts ...grpc.CallOption) (*GetSpendableVtxosResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	GetVtxoChain(ctx context.Context, in *GetVtxoChainRequest, opts ...grpc.CallOption) (*GetVtxoChainResponse, error)
	GetVirtualTxs(ctx context.Context, in *GetVirtualTxsRequest, opts ...grpc.CallOption) (*GetVirtualTxsResponse, error)
	GetSweptCommitmentTx(ctx context.Context, in *GetSweptCommitmentTxRequest, opts ...grpc.CallOption) (*GetSweptCommitmentTxResponse, error)
}

type indexerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerServiceClient(cc grpc.ClientConnInterface) IndexerServiceClient {
	return &indexerServiceClient{cc}
}

func (c *indexerServiceClient) GetCommitmentTx(ctx context.Context, in *GetCommitmentTxRequest, opts ...grpc.CallOption) (*GetCommitmentTxResponse, error) {
	out := new(GetCommitmentTxResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetCommitmentTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVtxoTree(ctx context.Context, in *GetVtxoTreeRequest, opts ...grpc.CallOption) (*GetVtxoTreeResponse, error) {
	out := new(GetVtxoTreeResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVtxoTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetForfeitTxs(ctx context.Context, in *GetForfeitTxsRequest, opts ...grpc.CallOption) (*GetForfeitTxsResponse, error) {
	out := new(GetForfeitTxsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetForfeitTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetConnectors(ctx context.Context, in *GetConnectorsRequest, opts ...grpc.CallOption) (*GetConnectorsResponse, error) {
	out := new(GetConnectorsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetSpendableVtxos(ctx context.Context, in *GetSpendableVtxosRequest, opts ...grpc.CallOption) (*GetSpendableVtxosResponse, error) {
	out := new(GetSpendableVtxosResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetSpendableVtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetTransactionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVtxoChain(ctx context.Context, in *GetVtxoChainRequest, opts ...grpc.CallOption) (*GetVtxoChainResponse, error) {
	out := new(GetVtxoChainResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVtxoChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetVirtualTxs(ctx context.Context, in *GetVirtualTxsRequest, opts ...grpc.CallOption) (*GetVirtualTxsResponse, error) {
	out := new(GetVirtualTxsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetVirtualTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetSweptCommitmentTx(ctx context.Context, in *GetSweptCommitmentTxRequest, opts ...grpc.CallOption) (*GetSweptCommitmentTxResponse, error) {
	out := new(GetSweptCommitmentTxResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.IndexerService/GetSweptCommitmentTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServiceServer is the server API for IndexerService service.
// All implementations should embed UnimplementedIndexerServiceServer
// for forward compatibility
type IndexerServiceServer interface {
	GetCommitmentTx(context.Context, *GetCommitmentTxRequest) (*GetCommitmentTxResponse, error)
	GetVtxoTree(context.Context, *GetVtxoTreeRequest) (*GetVtxoTreeResponse, error)
	GetForfeitTxs(context.Context, *GetForfeitTxsRequest) (*GetForfeitTxsResponse, error)
	GetConnectors(context.Context, *GetConnectorsRequest) (*GetConnectorsResponse, error)
	GetSpendableVtxos(context.Context, *GetSpendableVtxosRequest) (*GetSpendableVtxosResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	GetVtxoChain(context.Context, *GetVtxoChainRequest) (*GetVtxoChainResponse, error)
	GetVirtualTxs(context.Context, *GetVirtualTxsRequest) (*GetVirtualTxsResponse, error)
	GetSweptCommitmentTx(context.Context, *GetSweptCommitmentTxRequest) (*GetSweptCommitmentTxResponse, error)
}

// UnimplementedIndexerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndexerServiceServer struct {
}

func (UnimplementedIndexerServiceServer) GetCommitmentTx(context.Context, *GetCommitmentTxRequest) (*GetCommitmentTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitmentTx not implemented")
}
func (UnimplementedIndexerServiceServer) GetVtxoTree(context.Context, *GetVtxoTreeRequest) (*GetVtxoTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtxoTree not implemented")
}
func (UnimplementedIndexerServiceServer) GetForfeitTxs(context.Context, *GetForfeitTxsRequest) (*GetForfeitTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForfeitTxs not implemented")
}
func (UnimplementedIndexerServiceServer) GetConnectors(context.Context, *GetConnectorsRequest) (*GetConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectors not implemented")
}
func (UnimplementedIndexerServiceServer) GetSpendableVtxos(context.Context, *GetSpendableVtxosRequest) (*GetSpendableVtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableVtxos not implemented")
}
func (UnimplementedIndexerServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedIndexerServiceServer) GetVtxoChain(context.Context, *GetVtxoChainRequest) (*GetVtxoChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVtxoChain not implemented")
}
func (UnimplementedIndexerServiceServer) GetVirtualTxs(context.Context, *GetVirtualTxsRequest) (*GetVirtualTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualTxs not implemented")
}
func (UnimplementedIndexerServiceServer) GetSweptCommitmentTx(context.Context, *GetSweptCommitmentTxRequest) (*GetSweptCommitmentTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSweptCommitmentTx not implemented")
}

// UnsafeIndexerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServiceServer will
// result in compilation errors.
type UnsafeIndexerServiceServer interface {
	mustEmbedUnimplementedIndexerServiceServer()
}

func RegisterIndexerServiceServer(s grpc.ServiceRegistrar, srv IndexerServiceServer) {
	s.RegisterService(&IndexerService_ServiceDesc, srv)
}

func _IndexerService_GetCommitmentTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitmentTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetCommitmentTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetCommitmentTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetCommitmentTx(ctx, req.(*GetCommitmentTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVtxoTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVtxoTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVtxoTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVtxoTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVtxoTree(ctx, req.(*GetVtxoTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetForfeitTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForfeitTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetForfeitTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetForfeitTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetForfeitTxs(ctx, req.(*GetForfeitTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetConnectors(ctx, req.(*GetConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetSpendableVtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableVtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetSpendableVtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetSpendableVtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetSpendableVtxos(ctx, req.(*GetSpendableVtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetTransactionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVtxoChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVtxoChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVtxoChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVtxoChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVtxoChain(ctx, req.(*GetVtxoChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetVirtualTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetVirtualTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetVirtualTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetVirtualTxs(ctx, req.(*GetVirtualTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetSweptCommitmentTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSweptCommitmentTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetSweptCommitmentTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.IndexerService/GetSweptCommitmentTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetSweptCommitmentTx(ctx, req.(*GetSweptCommitmentTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexerService_ServiceDesc is the grpc.ServiceDesc for IndexerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ark.v1.IndexerService",
	HandlerType: (*IndexerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommitmentTx",
			Handler:    _IndexerService_GetCommitmentTx_Handler,
		},
		{
			MethodName: "GetVtxoTree",
			Handler:    _IndexerService_GetVtxoTree_Handler,
		},
		{
			MethodName: "GetForfeitTxs",
			Handler:    _IndexerService_GetForfeitTxs_Handler,
		},
		{
			MethodName: "GetConnectors",
			Handler:    _IndexerService_GetConnectors_Handler,
		},
		{
			MethodName: "GetSpendableVtxos",
			Handler:    _IndexerService_GetSpendableVtxos_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _IndexerService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "GetVtxoChain",
			Handler:    _IndexerService_GetVtxoChain_Handler,
		},
		{
			MethodName: "GetVirtualTxs",
			Handler:    _IndexerService_GetVirtualTxs_Handler,
		},
		{
			MethodName: "GetSweptCommitmentTx",
			Handler:    _IndexerService_GetSweptCommitmentTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ark/v1/indexer.proto",
}
