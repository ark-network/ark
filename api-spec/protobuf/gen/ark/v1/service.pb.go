// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: ark/v1/service.proto

package arkv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{0}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey              string      `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	BatchExpiry         int64       `protobuf:"varint,2,opt,name=batch_expiry,json=batchExpiry,proto3" json:"batch_expiry,omitempty"`
	UnilateralExitDelay int64       `protobuf:"varint,3,opt,name=unilateral_exit_delay,json=unilateralExitDelay,proto3" json:"unilateral_exit_delay,omitempty"`
	RoundInterval       int64       `protobuf:"varint,4,opt,name=round_interval,json=roundInterval,proto3" json:"round_interval,omitempty"`
	Network             string      `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Dust                int64       `protobuf:"varint,6,opt,name=dust,proto3" json:"dust,omitempty"`
	BoardingTemplate    string      `protobuf:"bytes,7,opt,name=boarding_template,json=boardingTemplate,proto3" json:"boarding_template,omitempty"`
	MarketHour          *MarketHour `protobuf:"bytes,8,opt,name=market_hour,json=marketHour,proto3" json:"market_hour,omitempty"`
	Version             string      `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoResponse) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *GetInfoResponse) GetBatchExpiry() int64 {
	if x != nil {
		return x.BatchExpiry
	}
	return 0
}

func (x *GetInfoResponse) GetUnilateralExitDelay() int64 {
	if x != nil {
		return x.UnilateralExitDelay
	}
	return 0
}

func (x *GetInfoResponse) GetRoundInterval() int64 {
	if x != nil {
		return x.RoundInterval
	}
	return 0
}

func (x *GetInfoResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetInfoResponse) GetDust() int64 {
	if x != nil {
		return x.Dust
	}
	return 0
}

func (x *GetInfoResponse) GetBoardingTemplate() string {
	if x != nil {
		return x.BoardingTemplate
	}
	return ""
}

func (x *GetInfoResponse) GetMarketHour() *MarketHour {
	if x != nil {
		return x.MarketHour
	}
	return nil
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetBoardingAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *GetBoardingAddressRequest) Reset() {
	*x = GetBoardingAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardingAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardingAddressRequest) ProtoMessage() {}

func (x *GetBoardingAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardingAddressRequest.ProtoReflect.Descriptor instead.
func (*GetBoardingAddressRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetBoardingAddressRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type GetBoardingAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Types that are assignable to TaprootTree:
	//
	//	*GetBoardingAddressResponse_Tapscripts
	TaprootTree isGetBoardingAddressResponse_TaprootTree `protobuf_oneof:"taproot_tree"`
}

func (x *GetBoardingAddressResponse) Reset() {
	*x = GetBoardingAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardingAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardingAddressResponse) ProtoMessage() {}

func (x *GetBoardingAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardingAddressResponse.ProtoReflect.Descriptor instead.
func (*GetBoardingAddressResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetBoardingAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (m *GetBoardingAddressResponse) GetTaprootTree() isGetBoardingAddressResponse_TaprootTree {
	if m != nil {
		return m.TaprootTree
	}
	return nil
}

func (x *GetBoardingAddressResponse) GetTapscripts() *Tapscripts {
	if x, ok := x.GetTaprootTree().(*GetBoardingAddressResponse_Tapscripts); ok {
		return x.Tapscripts
	}
	return nil
}

type isGetBoardingAddressResponse_TaprootTree interface {
	isGetBoardingAddressResponse_TaprootTree()
}

type GetBoardingAddressResponse_Tapscripts struct {
	Tapscripts *Tapscripts `protobuf:"bytes,3,opt,name=tapscripts,proto3,oneof"`
}

func (*GetBoardingAddressResponse_Tapscripts) isGetBoardingAddressResponse_TaprootTree() {}

type RegisterIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tapscripts aims to reveal the taproot tree of the unspent & unexpired VTXOs.
	Tapscripts map[string]*Tapscripts `protobuf:"bytes,1,rep,name=tapscripts,proto3" json:"tapscripts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The BIP322 signature contains the outpoints that are gonna be forfeit and the outputs to be added in the new tree.
	Bip322Signature *Bip322Signature `protobuf:"bytes,2,opt,name=bip322_signature,json=bip322Signature,proto3" json:"bip322_signature,omitempty"`
	Notes           []string         `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *RegisterIntentRequest) Reset() {
	*x = RegisterIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIntentRequest) ProtoMessage() {}

func (x *RegisterIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterIntentRequest.ProtoReflect.Descriptor instead.
func (*RegisterIntentRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterIntentRequest) GetTapscripts() map[string]*Tapscripts {
	if x != nil {
		return x.Tapscripts
	}
	return nil
}

func (x *RegisterIntentRequest) GetBip322Signature() *Bip322Signature {
	if x != nil {
		return x.Bip322Signature
	}
	return nil
}

func (x *RegisterIntentRequest) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

type RegisterIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
}

func (x *RegisterIntentResponse) Reset() {
	*x = RegisterIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIntentResponse) ProtoMessage() {}

func (x *RegisterIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterIntentResponse.ProtoReflect.Descriptor instead.
func (*RegisterIntentResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterIntentResponse) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

type Musig2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosignersPublicKeys []string `protobuf:"bytes,1,rep,name=cosigners_public_keys,json=cosignersPublicKeys,proto3" json:"cosigners_public_keys,omitempty"`
	SigningAll          bool     `protobuf:"varint,2,opt,name=signing_all,json=signingAll,proto3" json:"signing_all,omitempty"`
}

func (x *Musig2) Reset() {
	*x = Musig2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Musig2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Musig2) ProtoMessage() {}

func (x *Musig2) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Musig2.ProtoReflect.Descriptor instead.
func (*Musig2) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *Musig2) GetCosignersPublicKeys() []string {
	if x != nil {
		return x.CosignersPublicKeys
	}
	return nil
}

func (x *Musig2) GetSigningAll() bool {
	if x != nil {
		return x.SigningAll
	}
	return false
}

type SubmitTreeNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId    string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Pubkey     string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	TreeNonces string `protobuf:"bytes,3,opt,name=tree_nonces,json=treeNonces,proto3" json:"tree_nonces,omitempty"`
}

func (x *SubmitTreeNoncesRequest) Reset() {
	*x = SubmitTreeNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTreeNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeNoncesRequest) ProtoMessage() {}

func (x *SubmitTreeNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeNoncesRequest.ProtoReflect.Descriptor instead.
func (*SubmitTreeNoncesRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitTreeNoncesRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SubmitTreeNoncesRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *SubmitTreeNoncesRequest) GetTreeNonces() string {
	if x != nil {
		return x.TreeNonces
	}
	return ""
}

type SubmitTreeNoncesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitTreeNoncesResponse) Reset() {
	*x = SubmitTreeNoncesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTreeNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeNoncesResponse) ProtoMessage() {}

func (x *SubmitTreeNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeNoncesResponse.ProtoReflect.Descriptor instead.
func (*SubmitTreeNoncesResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{8}
}

type SubmitTreeSignaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId        string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Pubkey         string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	TreeSignatures string `protobuf:"bytes,3,opt,name=tree_signatures,json=treeSignatures,proto3" json:"tree_signatures,omitempty"`
}

func (x *SubmitTreeSignaturesRequest) Reset() {
	*x = SubmitTreeSignaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTreeSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeSignaturesRequest) ProtoMessage() {}

func (x *SubmitTreeSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeSignaturesRequest.ProtoReflect.Descriptor instead.
func (*SubmitTreeSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitTreeSignaturesRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SubmitTreeSignaturesRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *SubmitTreeSignaturesRequest) GetTreeSignatures() string {
	if x != nil {
		return x.TreeSignatures
	}
	return ""
}

type SubmitTreeSignaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitTreeSignaturesResponse) Reset() {
	*x = SubmitTreeSignaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTreeSignaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTreeSignaturesResponse) ProtoMessage() {}

func (x *SubmitTreeSignaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTreeSignaturesResponse.ProtoReflect.Descriptor instead.
func (*SubmitTreeSignaturesResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{10}
}

type SubmitSignedForfeitTxsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Forfeit txs signed by the user.
	SignedForfeitTxs []string `protobuf:"bytes,2,rep,name=signed_forfeit_txs,json=signedForfeitTxs,proto3" json:"signed_forfeit_txs,omitempty"`
	// The user has to sign also the commitment tx if he registerd a boarding UTXO.
	SignedCommitmentTx string `protobuf:"bytes,3,opt,name=signed_commitment_tx,json=signedCommitmentTx,proto3" json:"signed_commitment_tx,omitempty"`
}

func (x *SubmitSignedForfeitTxsRequest) Reset() {
	*x = SubmitSignedForfeitTxsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitSignedForfeitTxsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSignedForfeitTxsRequest) ProtoMessage() {}

func (x *SubmitSignedForfeitTxsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSignedForfeitTxsRequest.ProtoReflect.Descriptor instead.
func (*SubmitSignedForfeitTxsRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *SubmitSignedForfeitTxsRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SubmitSignedForfeitTxsRequest) GetSignedForfeitTxs() []string {
	if x != nil {
		return x.SignedForfeitTxs
	}
	return nil
}

func (x *SubmitSignedForfeitTxsRequest) GetSignedCommitmentTx() string {
	if x != nil {
		return x.SignedCommitmentTx
	}
	return ""
}

type SubmitSignedForfeitTxsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitSignedForfeitTxsResponse) Reset() {
	*x = SubmitSignedForfeitTxsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitSignedForfeitTxsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSignedForfeitTxsResponse) ProtoMessage() {}

func (x *SubmitSignedForfeitTxsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSignedForfeitTxsResponse.ProtoReflect.Descriptor instead.
func (*SubmitSignedForfeitTxsResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{12}
}

type GetBatchEventStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId string   `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Topics  []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *GetBatchEventStreamRequest) Reset() {
	*x = GetBatchEventStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchEventStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchEventStreamRequest) ProtoMessage() {}

func (x *GetBatchEventStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchEventStreamRequest.ProtoReflect.Descriptor instead.
func (*GetBatchEventStreamRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetBatchEventStreamRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *GetBatchEventStreamRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type GetBatchEventStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*GetBatchEventStreamResponse_BatchStarted
	//	*GetBatchEventStreamResponse_TreeTx
	//	*GetBatchEventStreamResponse_ConnectorTx
	//	*GetBatchEventStreamResponse_BatchFinalization
	//	*GetBatchEventStreamResponse_BatchFinalized
	//	*GetBatchEventStreamResponse_BatchFailed
	//	*GetBatchEventStreamResponse_TreeSigningStarted
	//	*GetBatchEventStreamResponse_TreeNoncesAggregated
	Event isGetBatchEventStreamResponse_Event `protobuf_oneof:"event"`
}

func (x *GetBatchEventStreamResponse) Reset() {
	*x = GetBatchEventStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchEventStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchEventStreamResponse) ProtoMessage() {}

func (x *GetBatchEventStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchEventStreamResponse.ProtoReflect.Descriptor instead.
func (*GetBatchEventStreamResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{14}
}

func (m *GetBatchEventStreamResponse) GetEvent() isGetBatchEventStreamResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetBatchStarted() *BatchStartedEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_BatchStarted); ok {
		return x.BatchStarted
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetTreeTx() *BatchVtxoTreeEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_TreeTx); ok {
		return x.TreeTx
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetConnectorTx() *BatchConnectorTreeEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_ConnectorTx); ok {
		return x.ConnectorTx
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetBatchFinalization() *BatchFinalizationEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_BatchFinalization); ok {
		return x.BatchFinalization
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetBatchFinalized() *BatchFinalizedEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_BatchFinalized); ok {
		return x.BatchFinalized
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetBatchFailed() *BatchFailedEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_BatchFailed); ok {
		return x.BatchFailed
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetTreeSigningStarted() *TreeSigningStartedEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_TreeSigningStarted); ok {
		return x.TreeSigningStarted
	}
	return nil
}

func (x *GetBatchEventStreamResponse) GetTreeNoncesAggregated() *TreeNoncesAggregatedEvent {
	if x, ok := x.GetEvent().(*GetBatchEventStreamResponse_TreeNoncesAggregated); ok {
		return x.TreeNoncesAggregated
	}
	return nil
}

type isGetBatchEventStreamResponse_Event interface {
	isGetBatchEventStreamResponse_Event()
}

type GetBatchEventStreamResponse_BatchStarted struct {
	BatchStarted *BatchStartedEvent `protobuf:"bytes,1,opt,name=batch_started,json=batchStarted,proto3,oneof"`
}

type GetBatchEventStreamResponse_TreeTx struct {
	TreeTx *BatchVtxoTreeEvent `protobuf:"bytes,2,opt,name=tree_tx,json=treeTx,proto3,oneof"`
}

type GetBatchEventStreamResponse_ConnectorTx struct {
	ConnectorTx *BatchConnectorTreeEvent `protobuf:"bytes,3,opt,name=connector_tx,json=connectorTx,proto3,oneof"`
}

type GetBatchEventStreamResponse_BatchFinalization struct {
	BatchFinalization *BatchFinalizationEvent `protobuf:"bytes,4,opt,name=batch_finalization,json=batchFinalization,proto3,oneof"`
}

type GetBatchEventStreamResponse_BatchFinalized struct {
	BatchFinalized *BatchFinalizedEvent `protobuf:"bytes,5,opt,name=batch_finalized,json=batchFinalized,proto3,oneof"`
}

type GetBatchEventStreamResponse_BatchFailed struct {
	BatchFailed *BatchFailedEvent `protobuf:"bytes,6,opt,name=batch_failed,json=batchFailed,proto3,oneof"`
}

type GetBatchEventStreamResponse_TreeSigningStarted struct {
	TreeSigningStarted *TreeSigningStartedEvent `protobuf:"bytes,7,opt,name=tree_signing_started,json=treeSigningStarted,proto3,oneof"`
}

type GetBatchEventStreamResponse_TreeNoncesAggregated struct {
	TreeNoncesAggregated *TreeNoncesAggregatedEvent `protobuf:"bytes,8,opt,name=tree_nonces_aggregated,json=treeNoncesAggregated,proto3,oneof"`
}

func (*GetBatchEventStreamResponse_BatchStarted) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_TreeTx) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_ConnectorTx) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_BatchFinalization) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_BatchFinalized) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_BatchFailed) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_TreeSigningStarted) isGetBatchEventStreamResponse_Event() {}

func (*GetBatchEventStreamResponse_TreeNoncesAggregated) isGetBatchEventStreamResponse_Event() {}

type ConfirmRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id returne dby the server when registering the intent.
	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
}

func (x *ConfirmRegistrationRequest) Reset() {
	*x = ConfirmRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRegistrationRequest) ProtoMessage() {}

func (x *ConfirmRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ConfirmRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *ConfirmRegistrationRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

type ConfirmRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlindedCred string `protobuf:"bytes,1,opt,name=blinded_cred,json=blindedCred,proto3" json:"blinded_cred,omitempty"`
}

func (x *ConfirmRegistrationResponse) Reset() {
	*x = ConfirmRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRegistrationResponse) ProtoMessage() {}

func (x *ConfirmRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRegistrationResponse.ProtoReflect.Descriptor instead.
func (*ConfirmRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *ConfirmRegistrationResponse) GetBlindedCred() string {
	if x != nil {
		return x.BlindedCred
	}
	return ""
}

type RegisterBlindedOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlindedCred string    `protobuf:"bytes,1,opt,name=blinded_cred,json=blindedCred,proto3" json:"blinded_cred,omitempty"`
	Vtxos       []*Output `protobuf:"bytes,2,rep,name=vtxos,proto3" json:"vtxos,omitempty"`
}

func (x *RegisterBlindedOutputsRequest) Reset() {
	*x = RegisterBlindedOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterBlindedOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBlindedOutputsRequest) ProtoMessage() {}

func (x *RegisterBlindedOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBlindedOutputsRequest.ProtoReflect.Descriptor instead.
func (*RegisterBlindedOutputsRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterBlindedOutputsRequest) GetBlindedCred() string {
	if x != nil {
		return x.BlindedCred
	}
	return ""
}

func (x *RegisterBlindedOutputsRequest) GetVtxos() []*Output {
	if x != nil {
		return x.Vtxos
	}
	return nil
}

type RegisterBlindedOutputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlindedCred string `protobuf:"bytes,1,opt,name=blinded_cred,json=blindedCred,proto3" json:"blinded_cred,omitempty"`
}

func (x *RegisterBlindedOutputsResponse) Reset() {
	*x = RegisterBlindedOutputsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterBlindedOutputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBlindedOutputsResponse) ProtoMessage() {}

func (x *RegisterBlindedOutputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBlindedOutputsResponse.ProtoReflect.Descriptor instead.
func (*RegisterBlindedOutputsResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterBlindedOutputsResponse) GetBlindedCred() string {
	if x != nil {
		return x.BlindedCred
	}
	return ""
}

type SubmitTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialSignedTx       string   `protobuf:"bytes,1,opt,name=partial_signed_tx,json=partialSignedTx,proto3" json:"partial_signed_tx,omitempty"`
	UnsignedCheckpointTxs []string `protobuf:"bytes,2,rep,name=unsigned_checkpoint_txs,json=unsignedCheckpointTxs,proto3" json:"unsigned_checkpoint_txs,omitempty"`
}

func (x *SubmitTxRequest) Reset() {
	*x = SubmitTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxRequest) ProtoMessage() {}

func (x *SubmitTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxRequest.ProtoReflect.Descriptor instead.
func (*SubmitTxRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *SubmitTxRequest) GetPartialSignedTx() string {
	if x != nil {
		return x.PartialSignedTx
	}
	return ""
}

func (x *SubmitTxRequest) GetUnsignedCheckpointTxs() []string {
	if x != nil {
		return x.UnsignedCheckpointTxs
	}
	return nil
}

type SubmitTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialSignedCheckpointTxs []string `protobuf:"bytes,3,rep,name=partial_signed_checkpoint_txs,json=partialSignedCheckpointTxs,proto3" json:"partial_signed_checkpoint_txs,omitempty"`
}

func (x *SubmitTxResponse) Reset() {
	*x = SubmitTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxResponse) ProtoMessage() {}

func (x *SubmitTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxResponse.ProtoReflect.Descriptor instead.
func (*SubmitTxResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *SubmitTxResponse) GetPartialSignedCheckpointTxs() []string {
	if x != nil {
		return x.PartialSignedCheckpointTxs
	}
	return nil
}

type SubmitCheckpointTxsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullySignedCheckpointTxs []string `protobuf:"bytes,1,rep,name=fully_signed_checkpoint_txs,json=fullySignedCheckpointTxs,proto3" json:"fully_signed_checkpoint_txs,omitempty"`
}

func (x *SubmitCheckpointTxsRequest) Reset() {
	*x = SubmitCheckpointTxsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCheckpointTxsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCheckpointTxsRequest) ProtoMessage() {}

func (x *SubmitCheckpointTxsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCheckpointTxsRequest.ProtoReflect.Descriptor instead.
func (*SubmitCheckpointTxsRequest) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *SubmitCheckpointTxsRequest) GetFullySignedCheckpointTxs() []string {
	if x != nil {
		return x.FullySignedCheckpointTxs
	}
	return nil
}

type SubmitCheckpointTxsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullySignedTx string `protobuf:"bytes,1,opt,name=fully_signed_tx,json=fullySignedTx,proto3" json:"fully_signed_tx,omitempty"`
}

func (x *SubmitCheckpointTxsResponse) Reset() {
	*x = SubmitCheckpointTxsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ark_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCheckpointTxsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCheckpointTxsResponse) ProtoMessage() {}

func (x *SubmitCheckpointTxsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ark_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCheckpointTxsResponse.ProtoReflect.Descriptor instead.
func (*SubmitCheckpointTxsResponse) Descriptor() ([]byte, []int) {
	return file_ark_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *SubmitCheckpointTxsResponse) GetFullySignedTx() string {
	if x != nil {
		return x.FullySignedTx
	}
	return ""
}

var File_ark_v1_service_proto protoreflect.FileDescriptor

var file_ark_v1_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x72,
	0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x75, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x7c, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x15, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x62, 0x69, 0x70, 0x33, 0x32, 0x32, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x70, 0x33, 0x32, 0x32, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x62, 0x69, 0x70, 0x33, 0x32, 0x32, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0f,
	0x54, 0x61, 0x70, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x70, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x35, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x06, 0x4d, 0x75, 0x73, 0x69, 0x67, 0x32,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x22, 0x6d, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x79, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1d,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x54, 0x78, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x54,
	0x78, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0xed, 0x04, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x74, 0x78,
	0x6f, 0x54, 0x72, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x72,
	0x65, 0x65, 0x54, 0x78, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x78, 0x12, 0x4f, 0x0a, 0x12, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x53, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x16, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x05,
	0x76, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x74, 0x78,
	0x6f, 0x73, 0x22, 0x43, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x78,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x73, 0x22, 0x55,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x78, 0x73, 0x22, 0x5b, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x78, 0x73, 0x22, 0x45, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x32, 0xe9, 0x09, 0x0a, 0x0a, 0x41, 0x72,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x74, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a,
	0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x1f, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x16,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x54, 0x78, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x54, 0x78, 0x73, 0x12, 0x85, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x7b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x61,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x6b, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x78, 0x12, 0x17, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x61, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a,
	0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78,
	0x12, 0x82, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x78, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x78, 0x73, 0x42, 0x92, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x6b, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x72, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x72,
	0x6b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x72, 0x6b, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x72, 0x6b, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x72,
	0x6b, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x07, 0x41, 0x72, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ark_v1_service_proto_rawDescOnce sync.Once
	file_ark_v1_service_proto_rawDescData = file_ark_v1_service_proto_rawDesc
)

func file_ark_v1_service_proto_rawDescGZIP() []byte {
	file_ark_v1_service_proto_rawDescOnce.Do(func() {
		file_ark_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_ark_v1_service_proto_rawDescData)
	})
	return file_ark_v1_service_proto_rawDescData
}

var file_ark_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_ark_v1_service_proto_goTypes = []interface{}{
	(*GetInfoRequest)(nil),                 // 0: ark.v1.GetInfoRequest
	(*GetInfoResponse)(nil),                // 1: ark.v1.GetInfoResponse
	(*GetBoardingAddressRequest)(nil),      // 2: ark.v1.GetBoardingAddressRequest
	(*GetBoardingAddressResponse)(nil),     // 3: ark.v1.GetBoardingAddressResponse
	(*RegisterIntentRequest)(nil),          // 4: ark.v1.RegisterIntentRequest
	(*RegisterIntentResponse)(nil),         // 5: ark.v1.RegisterIntentResponse
	(*Musig2)(nil),                         // 6: ark.v1.Musig2
	(*SubmitTreeNoncesRequest)(nil),        // 7: ark.v1.SubmitTreeNoncesRequest
	(*SubmitTreeNoncesResponse)(nil),       // 8: ark.v1.SubmitTreeNoncesResponse
	(*SubmitTreeSignaturesRequest)(nil),    // 9: ark.v1.SubmitTreeSignaturesRequest
	(*SubmitTreeSignaturesResponse)(nil),   // 10: ark.v1.SubmitTreeSignaturesResponse
	(*SubmitSignedForfeitTxsRequest)(nil),  // 11: ark.v1.SubmitSignedForfeitTxsRequest
	(*SubmitSignedForfeitTxsResponse)(nil), // 12: ark.v1.SubmitSignedForfeitTxsResponse
	(*GetBatchEventStreamRequest)(nil),     // 13: ark.v1.GetBatchEventStreamRequest
	(*GetBatchEventStreamResponse)(nil),    // 14: ark.v1.GetBatchEventStreamResponse
	(*ConfirmRegistrationRequest)(nil),     // 15: ark.v1.ConfirmRegistrationRequest
	(*ConfirmRegistrationResponse)(nil),    // 16: ark.v1.ConfirmRegistrationResponse
	(*RegisterBlindedOutputsRequest)(nil),  // 17: ark.v1.RegisterBlindedOutputsRequest
	(*RegisterBlindedOutputsResponse)(nil), // 18: ark.v1.RegisterBlindedOutputsResponse
	(*SubmitTxRequest)(nil),                // 19: ark.v1.SubmitTxRequest
	(*SubmitTxResponse)(nil),               // 20: ark.v1.SubmitTxResponse
	(*SubmitCheckpointTxsRequest)(nil),     // 21: ark.v1.SubmitCheckpointTxsRequest
	(*SubmitCheckpointTxsResponse)(nil),    // 22: ark.v1.SubmitCheckpointTxsResponse
	nil,                                    // 23: ark.v1.RegisterIntentRequest.TapscriptsEntry
	(*MarketHour)(nil),                     // 24: ark.v1.MarketHour
	(*Tapscripts)(nil),                     // 25: ark.v1.Tapscripts
	(*Bip322Signature)(nil),                // 26: ark.v1.Bip322Signature
	(*BatchStartedEvent)(nil),              // 27: ark.v1.BatchStartedEvent
	(*BatchVtxoTreeEvent)(nil),             // 28: ark.v1.BatchVtxoTreeEvent
	(*BatchConnectorTreeEvent)(nil),        // 29: ark.v1.BatchConnectorTreeEvent
	(*BatchFinalizationEvent)(nil),         // 30: ark.v1.BatchFinalizationEvent
	(*BatchFinalizedEvent)(nil),            // 31: ark.v1.BatchFinalizedEvent
	(*BatchFailedEvent)(nil),               // 32: ark.v1.BatchFailedEvent
	(*TreeSigningStartedEvent)(nil),        // 33: ark.v1.TreeSigningStartedEvent
	(*TreeNoncesAggregatedEvent)(nil),      // 34: ark.v1.TreeNoncesAggregatedEvent
	(*Output)(nil),                         // 35: ark.v1.Output
}
var file_ark_v1_service_proto_depIdxs = []int32{
	24, // 0: ark.v1.GetInfoResponse.market_hour:type_name -> ark.v1.MarketHour
	25, // 1: ark.v1.GetBoardingAddressResponse.tapscripts:type_name -> ark.v1.Tapscripts
	23, // 2: ark.v1.RegisterIntentRequest.tapscripts:type_name -> ark.v1.RegisterIntentRequest.TapscriptsEntry
	26, // 3: ark.v1.RegisterIntentRequest.bip322_signature:type_name -> ark.v1.Bip322Signature
	27, // 4: ark.v1.GetBatchEventStreamResponse.batch_started:type_name -> ark.v1.BatchStartedEvent
	28, // 5: ark.v1.GetBatchEventStreamResponse.tree_tx:type_name -> ark.v1.BatchVtxoTreeEvent
	29, // 6: ark.v1.GetBatchEventStreamResponse.connector_tx:type_name -> ark.v1.BatchConnectorTreeEvent
	30, // 7: ark.v1.GetBatchEventStreamResponse.batch_finalization:type_name -> ark.v1.BatchFinalizationEvent
	31, // 8: ark.v1.GetBatchEventStreamResponse.batch_finalized:type_name -> ark.v1.BatchFinalizedEvent
	32, // 9: ark.v1.GetBatchEventStreamResponse.batch_failed:type_name -> ark.v1.BatchFailedEvent
	33, // 10: ark.v1.GetBatchEventStreamResponse.tree_signing_started:type_name -> ark.v1.TreeSigningStartedEvent
	34, // 11: ark.v1.GetBatchEventStreamResponse.tree_nonces_aggregated:type_name -> ark.v1.TreeNoncesAggregatedEvent
	35, // 12: ark.v1.RegisterBlindedOutputsRequest.vtxos:type_name -> ark.v1.Output
	25, // 13: ark.v1.RegisterIntentRequest.TapscriptsEntry.value:type_name -> ark.v1.Tapscripts
	0,  // 14: ark.v1.ArkService.GetInfo:input_type -> ark.v1.GetInfoRequest
	4,  // 15: ark.v1.ArkService.RegisterIntent:input_type -> ark.v1.RegisterIntentRequest
	7,  // 16: ark.v1.ArkService.SubmitTreeNonces:input_type -> ark.v1.SubmitTreeNoncesRequest
	9,  // 17: ark.v1.ArkService.SubmitTreeSignatures:input_type -> ark.v1.SubmitTreeSignaturesRequest
	11, // 18: ark.v1.ArkService.SubmitSignedForfeitTxs:input_type -> ark.v1.SubmitSignedForfeitTxsRequest
	13, // 19: ark.v1.ArkService.GetBatchEventStream:input_type -> ark.v1.GetBatchEventStreamRequest
	15, // 20: ark.v1.ArkService.ConfirmRegistration:input_type -> ark.v1.ConfirmRegistrationRequest
	17, // 21: ark.v1.ArkService.RegisterBlindedOutputs:input_type -> ark.v1.RegisterBlindedOutputsRequest
	19, // 22: ark.v1.ArkService.SubmitTx:input_type -> ark.v1.SubmitTxRequest
	21, // 23: ark.v1.ArkService.SubmitCheckpointTxs:input_type -> ark.v1.SubmitCheckpointTxsRequest
	1,  // 24: ark.v1.ArkService.GetInfo:output_type -> ark.v1.GetInfoResponse
	5,  // 25: ark.v1.ArkService.RegisterIntent:output_type -> ark.v1.RegisterIntentResponse
	8,  // 26: ark.v1.ArkService.SubmitTreeNonces:output_type -> ark.v1.SubmitTreeNoncesResponse
	10, // 27: ark.v1.ArkService.SubmitTreeSignatures:output_type -> ark.v1.SubmitTreeSignaturesResponse
	12, // 28: ark.v1.ArkService.SubmitSignedForfeitTxs:output_type -> ark.v1.SubmitSignedForfeitTxsResponse
	14, // 29: ark.v1.ArkService.GetBatchEventStream:output_type -> ark.v1.GetBatchEventStreamResponse
	16, // 30: ark.v1.ArkService.ConfirmRegistration:output_type -> ark.v1.ConfirmRegistrationResponse
	18, // 31: ark.v1.ArkService.RegisterBlindedOutputs:output_type -> ark.v1.RegisterBlindedOutputsResponse
	20, // 32: ark.v1.ArkService.SubmitTx:output_type -> ark.v1.SubmitTxResponse
	22, // 33: ark.v1.ArkService.SubmitCheckpointTxs:output_type -> ark.v1.SubmitCheckpointTxsResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ark_v1_service_proto_init() }
func file_ark_v1_service_proto_init() {
	if File_ark_v1_service_proto != nil {
		return
	}
	file_ark_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ark_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardingAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardingAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Musig2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTreeNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTreeNoncesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTreeSignaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTreeSignaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitSignedForfeitTxsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitSignedForfeitTxsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchEventStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchEventStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterBlindedOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterBlindedOutputsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCheckpointTxsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ark_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCheckpointTxsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ark_v1_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetBoardingAddressResponse_Tapscripts)(nil),
	}
	file_ark_v1_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*GetBatchEventStreamResponse_BatchStarted)(nil),
		(*GetBatchEventStreamResponse_TreeTx)(nil),
		(*GetBatchEventStreamResponse_ConnectorTx)(nil),
		(*GetBatchEventStreamResponse_BatchFinalization)(nil),
		(*GetBatchEventStreamResponse_BatchFinalized)(nil),
		(*GetBatchEventStreamResponse_BatchFailed)(nil),
		(*GetBatchEventStreamResponse_TreeSigningStarted)(nil),
		(*GetBatchEventStreamResponse_TreeNoncesAggregated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ark_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ark_v1_service_proto_goTypes,
		DependencyIndexes: file_ark_v1_service_proto_depIdxs,
		MessageInfos:      file_ark_v1_service_proto_msgTypes,
	}.Build()
	File_ark_v1_service_proto = out.File
	file_ark_v1_service_proto_rawDesc = nil
	file_ark_v1_service_proto_goTypes = nil
	file_ark_v1_service_proto_depIdxs = nil
}
