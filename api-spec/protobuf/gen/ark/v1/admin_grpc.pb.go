// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package arkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	GetCommitmentTxInfo(ctx context.Context, in *GetCommitmentTxInfoRequest, opts ...grpc.CallOption) (*GetCommitmentTxInfoResponse, error)
	GetCommitmentTxs(ctx context.Context, in *GetCommitmentTxsRequest, opts ...grpc.CallOption) (*GetCommitmentTxsResponse, error)
	GetScheduledSweep(ctx context.Context, in *GetScheduledSweepRequest, opts ...grpc.CallOption) (*GetScheduledSweepResponse, error)
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error)
	GetMarketHour(ctx context.Context, in *GetMarketHourRequest, opts ...grpc.CallOption) (*GetMarketHourResponse, error)
	UpdateMarketHour(ctx context.Context, in *UpdateMarketHourRequest, opts ...grpc.CallOption) (*UpdateMarketHourResponse, error)
	ListIntents(ctx context.Context, in *ListIntentsRequest, opts ...grpc.CallOption) (*ListIntentsResponse, error)
	DeleteIntents(ctx context.Context, in *DeleteIntentsRequest, opts ...grpc.CallOption) (*DeleteIntentsResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetCommitmentTxInfo(ctx context.Context, in *GetCommitmentTxInfoRequest, opts ...grpc.CallOption) (*GetCommitmentTxInfoResponse, error) {
	out := new(GetCommitmentTxInfoResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/GetCommitmentTxInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCommitmentTxs(ctx context.Context, in *GetCommitmentTxsRequest, opts ...grpc.CallOption) (*GetCommitmentTxsResponse, error) {
	out := new(GetCommitmentTxsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/GetCommitmentTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetScheduledSweep(ctx context.Context, in *GetScheduledSweepRequest, opts ...grpc.CallOption) (*GetScheduledSweepResponse, error) {
	out := new(GetScheduledSweepResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/GetScheduledSweep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error) {
	out := new(CreateNoteResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetMarketHour(ctx context.Context, in *GetMarketHourRequest, opts ...grpc.CallOption) (*GetMarketHourResponse, error) {
	out := new(GetMarketHourResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/GetMarketHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateMarketHour(ctx context.Context, in *UpdateMarketHourRequest, opts ...grpc.CallOption) (*UpdateMarketHourResponse, error) {
	out := new(UpdateMarketHourResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/UpdateMarketHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIntents(ctx context.Context, in *ListIntentsRequest, opts ...grpc.CallOption) (*ListIntentsResponse, error) {
	out := new(ListIntentsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/ListIntents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteIntents(ctx context.Context, in *DeleteIntentsRequest, opts ...grpc.CallOption) (*DeleteIntentsResponse, error) {
	out := new(DeleteIntentsResponse)
	err := c.cc.Invoke(ctx, "/ark.v1.AdminService/DeleteIntents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	GetCommitmentTxInfo(context.Context, *GetCommitmentTxInfoRequest) (*GetCommitmentTxInfoResponse, error)
	GetCommitmentTxs(context.Context, *GetCommitmentTxsRequest) (*GetCommitmentTxsResponse, error)
	GetScheduledSweep(context.Context, *GetScheduledSweepRequest) (*GetScheduledSweepResponse, error)
	CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error)
	GetMarketHour(context.Context, *GetMarketHourRequest) (*GetMarketHourResponse, error)
	UpdateMarketHour(context.Context, *UpdateMarketHourRequest) (*UpdateMarketHourResponse, error)
	ListIntents(context.Context, *ListIntentsRequest) (*ListIntentsResponse, error)
	DeleteIntents(context.Context, *DeleteIntentsRequest) (*DeleteIntentsResponse, error)
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) GetCommitmentTxInfo(context.Context, *GetCommitmentTxInfoRequest) (*GetCommitmentTxInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitmentTxInfo not implemented")
}
func (UnimplementedAdminServiceServer) GetCommitmentTxs(context.Context, *GetCommitmentTxsRequest) (*GetCommitmentTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitmentTxs not implemented")
}
func (UnimplementedAdminServiceServer) GetScheduledSweep(context.Context, *GetScheduledSweepRequest) (*GetScheduledSweepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledSweep not implemented")
}
func (UnimplementedAdminServiceServer) CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedAdminServiceServer) GetMarketHour(context.Context, *GetMarketHourRequest) (*GetMarketHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketHour not implemented")
}
func (UnimplementedAdminServiceServer) UpdateMarketHour(context.Context, *UpdateMarketHourRequest) (*UpdateMarketHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketHour not implemented")
}
func (UnimplementedAdminServiceServer) ListIntents(context.Context, *ListIntentsRequest) (*ListIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntents not implemented")
}
func (UnimplementedAdminServiceServer) DeleteIntents(context.Context, *DeleteIntentsRequest) (*DeleteIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntents not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetCommitmentTxInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitmentTxInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCommitmentTxInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/GetCommitmentTxInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCommitmentTxInfo(ctx, req.(*GetCommitmentTxInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCommitmentTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitmentTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCommitmentTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/GetCommitmentTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCommitmentTxs(ctx, req.(*GetCommitmentTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetScheduledSweep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledSweepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetScheduledSweep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/GetScheduledSweep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetScheduledSweep(ctx, req.(*GetScheduledSweepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetMarketHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetMarketHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/GetMarketHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetMarketHour(ctx, req.(*GetMarketHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateMarketHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateMarketHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/UpdateMarketHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateMarketHour(ctx, req.(*UpdateMarketHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/ListIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIntents(ctx, req.(*ListIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ark.v1.AdminService/DeleteIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteIntents(ctx, req.(*DeleteIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ark.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommitmentTxInfo",
			Handler:    _AdminService_GetCommitmentTxInfo_Handler,
		},
		{
			MethodName: "GetCommitmentTxs",
			Handler:    _AdminService_GetCommitmentTxs_Handler,
		},
		{
			MethodName: "GetScheduledSweep",
			Handler:    _AdminService_GetScheduledSweep_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _AdminService_CreateNote_Handler,
		},
		{
			MethodName: "GetMarketHour",
			Handler:    _AdminService_GetMarketHour_Handler,
		},
		{
			MethodName: "UpdateMarketHour",
			Handler:    _AdminService_UpdateMarketHour_Handler,
		},
		{
			MethodName: "ListIntents",
			Handler:    _AdminService_ListIntents_Handler,
		},
		{
			MethodName: "DeleteIntents",
			Handler:    _AdminService_DeleteIntents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ark/v1/admin.proto",
}
