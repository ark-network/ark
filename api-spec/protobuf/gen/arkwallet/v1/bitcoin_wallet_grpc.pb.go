// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package arkwalletv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetPubkey(ctx context.Context, in *GetPubkeyRequest, opts ...grpc.CallOption) (*GetPubkeyResponse, error)
	GetForfeitAddress(ctx context.Context, in *GetForfeitAddressRequest, opts ...grpc.CallOption) (*GetForfeitAddressResponse, error)
	DeriveConnectorAddress(ctx context.Context, in *DeriveConnectorAddressRequest, opts ...grpc.CallOption) (*DeriveConnectorAddressResponse, error)
	DeriveAddresses(ctx context.Context, in *DeriveAddressesRequest, opts ...grpc.CallOption) (*DeriveAddressesResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	SignTransactionTapscript(ctx context.Context, in *SignTransactionTapscriptRequest, opts ...grpc.CallOption) (*SignTransactionTapscriptResponse, error)
	SelectUtxos(ctx context.Context, in *SelectUtxosRequest, opts ...grpc.CallOption) (*SelectUtxosResponse, error)
	BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (*BroadcastTransactionResponse, error)
	WaitForSync(ctx context.Context, in *WaitForSyncRequest, opts ...grpc.CallOption) (*WaitForSyncResponse, error)
	GetSyncedUpdate(ctx context.Context, in *GetSyncedUpdateRequest, opts ...grpc.CallOption) (WalletService_GetSyncedUpdateClient, error)
	IsTransactionConfirmed(ctx context.Context, in *IsTransactionConfirmedRequest, opts ...grpc.CallOption) (*IsTransactionConfirmedResponse, error)
	EstimateFees(ctx context.Context, in *EstimateFeesRequest, opts ...grpc.CallOption) (*EstimateFeesResponse, error)
	MinRelayFee(ctx context.Context, in *MinRelayFeeRequest, opts ...grpc.CallOption) (*MinRelayFeeResponse, error)
	MinRelayFeeRate(ctx context.Context, in *MinRelayFeeRateRequest, opts ...grpc.CallOption) (*MinRelayFeeRateResponse, error)
	ListConnectorUtxos(ctx context.Context, in *ListConnectorUtxosRequest, opts ...grpc.CallOption) (*ListConnectorUtxosResponse, error)
	MainAccountBalance(ctx context.Context, in *MainAccountBalanceRequest, opts ...grpc.CallOption) (*MainAccountBalanceResponse, error)
	ConnectorsAccountBalance(ctx context.Context, in *ConnectorsAccountBalanceRequest, opts ...grpc.CallOption) (*ConnectorsAccountBalanceResponse, error)
	LockConnectorUtxos(ctx context.Context, in *LockConnectorUtxosRequest, opts ...grpc.CallOption) (*LockConnectorUtxosResponse, error)
	GetDustAmount(ctx context.Context, in *GetDustAmountRequest, opts ...grpc.CallOption) (*GetDustAmountResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
	VerifyMessageSignature(ctx context.Context, in *VerifyMessageSignatureRequest, opts ...grpc.CallOption) (*VerifyMessageSignatureResponse, error)
	GetCurrentBlockTime(ctx context.Context, in *GetCurrentBlockTimeRequest, opts ...grpc.CallOption) (*GetCurrentBlockTimeResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	WatchScripts(ctx context.Context, in *WatchScriptsRequest, opts ...grpc.CallOption) (*WatchScriptsResponse, error)
	UnwatchScripts(ctx context.Context, in *UnwatchScriptsRequest, opts ...grpc.CallOption) (*UnwatchScriptsResponse, error)
	NotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (WalletService_NotificationStreamClient, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error) {
	out := new(GenSeedResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetPubkey(ctx context.Context, in *GetPubkeyRequest, opts ...grpc.CallOption) (*GetPubkeyResponse, error) {
	out := new(GetPubkeyResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/GetPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetForfeitAddress(ctx context.Context, in *GetForfeitAddressRequest, opts ...grpc.CallOption) (*GetForfeitAddressResponse, error) {
	out := new(GetForfeitAddressResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/GetForfeitAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeriveConnectorAddress(ctx context.Context, in *DeriveConnectorAddressRequest, opts ...grpc.CallOption) (*DeriveConnectorAddressResponse, error) {
	out := new(DeriveConnectorAddressResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/DeriveConnectorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeriveAddresses(ctx context.Context, in *DeriveAddressesRequest, opts ...grpc.CallOption) (*DeriveAddressesResponse, error) {
	out := new(DeriveAddressesResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/DeriveAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignTransactionTapscript(ctx context.Context, in *SignTransactionTapscriptRequest, opts ...grpc.CallOption) (*SignTransactionTapscriptResponse, error) {
	out := new(SignTransactionTapscriptResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/SignTransactionTapscript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SelectUtxos(ctx context.Context, in *SelectUtxosRequest, opts ...grpc.CallOption) (*SelectUtxosResponse, error) {
	out := new(SelectUtxosResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/SelectUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (*BroadcastTransactionResponse, error) {
	out := new(BroadcastTransactionResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/BroadcastTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WaitForSync(ctx context.Context, in *WaitForSyncRequest, opts ...grpc.CallOption) (*WaitForSyncResponse, error) {
	out := new(WaitForSyncResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/WaitForSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetSyncedUpdate(ctx context.Context, in *GetSyncedUpdateRequest, opts ...grpc.CallOption) (WalletService_GetSyncedUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &WalletService_ServiceDesc.Streams[0], "/arkwallet.v1.WalletService/GetSyncedUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceGetSyncedUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_GetSyncedUpdateClient interface {
	Recv() (*GetSyncedUpdateResponse, error)
	grpc.ClientStream
}

type walletServiceGetSyncedUpdateClient struct {
	grpc.ClientStream
}

func (x *walletServiceGetSyncedUpdateClient) Recv() (*GetSyncedUpdateResponse, error) {
	m := new(GetSyncedUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) IsTransactionConfirmed(ctx context.Context, in *IsTransactionConfirmedRequest, opts ...grpc.CallOption) (*IsTransactionConfirmedResponse, error) {
	out := new(IsTransactionConfirmedResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/IsTransactionConfirmed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) EstimateFees(ctx context.Context, in *EstimateFeesRequest, opts ...grpc.CallOption) (*EstimateFeesResponse, error) {
	out := new(EstimateFeesResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/EstimateFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) MinRelayFee(ctx context.Context, in *MinRelayFeeRequest, opts ...grpc.CallOption) (*MinRelayFeeResponse, error) {
	out := new(MinRelayFeeResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/MinRelayFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) MinRelayFeeRate(ctx context.Context, in *MinRelayFeeRateRequest, opts ...grpc.CallOption) (*MinRelayFeeRateResponse, error) {
	out := new(MinRelayFeeRateResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/MinRelayFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListConnectorUtxos(ctx context.Context, in *ListConnectorUtxosRequest, opts ...grpc.CallOption) (*ListConnectorUtxosResponse, error) {
	out := new(ListConnectorUtxosResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/ListConnectorUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) MainAccountBalance(ctx context.Context, in *MainAccountBalanceRequest, opts ...grpc.CallOption) (*MainAccountBalanceResponse, error) {
	out := new(MainAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/MainAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ConnectorsAccountBalance(ctx context.Context, in *ConnectorsAccountBalanceRequest, opts ...grpc.CallOption) (*ConnectorsAccountBalanceResponse, error) {
	out := new(ConnectorsAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/ConnectorsAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) LockConnectorUtxos(ctx context.Context, in *LockConnectorUtxosRequest, opts ...grpc.CallOption) (*LockConnectorUtxosResponse, error) {
	out := new(LockConnectorUtxosResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/LockConnectorUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetDustAmount(ctx context.Context, in *GetDustAmountRequest, opts ...grpc.CallOption) (*GetDustAmountResponse, error) {
	out := new(GetDustAmountResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/GetDustAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) VerifyMessageSignature(ctx context.Context, in *VerifyMessageSignatureRequest, opts ...grpc.CallOption) (*VerifyMessageSignatureResponse, error) {
	out := new(VerifyMessageSignatureResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/VerifyMessageSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetCurrentBlockTime(ctx context.Context, in *GetCurrentBlockTimeRequest, opts ...grpc.CallOption) (*GetCurrentBlockTimeResponse, error) {
	out := new(GetCurrentBlockTimeResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/GetCurrentBlockTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WatchScripts(ctx context.Context, in *WatchScriptsRequest, opts ...grpc.CallOption) (*WatchScriptsResponse, error) {
	out := new(WatchScriptsResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/WatchScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) UnwatchScripts(ctx context.Context, in *UnwatchScriptsRequest, opts ...grpc.CallOption) (*UnwatchScriptsResponse, error) {
	out := new(UnwatchScriptsResponse)
	err := c.cc.Invoke(ctx, "/arkwallet.v1.WalletService/UnwatchScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) NotificationStream(ctx context.Context, in *NotificationStreamRequest, opts ...grpc.CallOption) (WalletService_NotificationStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WalletService_ServiceDesc.Streams[1], "/arkwallet.v1.WalletService/NotificationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceNotificationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_NotificationStreamClient interface {
	Recv() (*NotificationStreamResponse, error)
	grpc.ClientStream
}

type walletServiceNotificationStreamClient struct {
	grpc.ClientStream
}

func (x *walletServiceNotificationStreamClient) Recv() (*NotificationStreamResponse, error) {
	m := new(NotificationStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations should embed UnimplementedWalletServiceServer
// for forward compatibility
type WalletServiceServer interface {
	GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	GetPubkey(context.Context, *GetPubkeyRequest) (*GetPubkeyResponse, error)
	GetForfeitAddress(context.Context, *GetForfeitAddressRequest) (*GetForfeitAddressResponse, error)
	DeriveConnectorAddress(context.Context, *DeriveConnectorAddressRequest) (*DeriveConnectorAddressResponse, error)
	DeriveAddresses(context.Context, *DeriveAddressesRequest) (*DeriveAddressesResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	SignTransactionTapscript(context.Context, *SignTransactionTapscriptRequest) (*SignTransactionTapscriptResponse, error)
	SelectUtxos(context.Context, *SelectUtxosRequest) (*SelectUtxosResponse, error)
	BroadcastTransaction(context.Context, *BroadcastTransactionRequest) (*BroadcastTransactionResponse, error)
	WaitForSync(context.Context, *WaitForSyncRequest) (*WaitForSyncResponse, error)
	GetSyncedUpdate(*GetSyncedUpdateRequest, WalletService_GetSyncedUpdateServer) error
	IsTransactionConfirmed(context.Context, *IsTransactionConfirmedRequest) (*IsTransactionConfirmedResponse, error)
	EstimateFees(context.Context, *EstimateFeesRequest) (*EstimateFeesResponse, error)
	MinRelayFee(context.Context, *MinRelayFeeRequest) (*MinRelayFeeResponse, error)
	MinRelayFeeRate(context.Context, *MinRelayFeeRateRequest) (*MinRelayFeeRateResponse, error)
	ListConnectorUtxos(context.Context, *ListConnectorUtxosRequest) (*ListConnectorUtxosResponse, error)
	MainAccountBalance(context.Context, *MainAccountBalanceRequest) (*MainAccountBalanceResponse, error)
	ConnectorsAccountBalance(context.Context, *ConnectorsAccountBalanceRequest) (*ConnectorsAccountBalanceResponse, error)
	LockConnectorUtxos(context.Context, *LockConnectorUtxosRequest) (*LockConnectorUtxosResponse, error)
	GetDustAmount(context.Context, *GetDustAmountRequest) (*GetDustAmountResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
	VerifyMessageSignature(context.Context, *VerifyMessageSignatureRequest) (*VerifyMessageSignatureResponse, error)
	GetCurrentBlockTime(context.Context, *GetCurrentBlockTimeRequest) (*GetCurrentBlockTimeResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	WatchScripts(context.Context, *WatchScriptsRequest) (*WatchScriptsResponse, error)
	UnwatchScripts(context.Context, *UnwatchScriptsRequest) (*UnwatchScriptsResponse, error)
	NotificationStream(*NotificationStreamRequest, WalletService_NotificationStreamServer) error
}

// UnimplementedWalletServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (UnimplementedWalletServiceServer) GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (UnimplementedWalletServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWalletServiceServer) Restore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedWalletServiceServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedWalletServiceServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedWalletServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedWalletServiceServer) GetPubkey(context.Context, *GetPubkeyRequest) (*GetPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubkey not implemented")
}
func (UnimplementedWalletServiceServer) GetForfeitAddress(context.Context, *GetForfeitAddressRequest) (*GetForfeitAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForfeitAddress not implemented")
}
func (UnimplementedWalletServiceServer) DeriveConnectorAddress(context.Context, *DeriveConnectorAddressRequest) (*DeriveConnectorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveConnectorAddress not implemented")
}
func (UnimplementedWalletServiceServer) DeriveAddresses(context.Context, *DeriveAddressesRequest) (*DeriveAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveAddresses not implemented")
}
func (UnimplementedWalletServiceServer) SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedWalletServiceServer) SignTransactionTapscript(context.Context, *SignTransactionTapscriptRequest) (*SignTransactionTapscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransactionTapscript not implemented")
}
func (UnimplementedWalletServiceServer) SelectUtxos(context.Context, *SelectUtxosRequest) (*SelectUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUtxos not implemented")
}
func (UnimplementedWalletServiceServer) BroadcastTransaction(context.Context, *BroadcastTransactionRequest) (*BroadcastTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransaction not implemented")
}
func (UnimplementedWalletServiceServer) WaitForSync(context.Context, *WaitForSyncRequest) (*WaitForSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSync not implemented")
}
func (UnimplementedWalletServiceServer) GetSyncedUpdate(*GetSyncedUpdateRequest, WalletService_GetSyncedUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSyncedUpdate not implemented")
}
func (UnimplementedWalletServiceServer) IsTransactionConfirmed(context.Context, *IsTransactionConfirmedRequest) (*IsTransactionConfirmedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTransactionConfirmed not implemented")
}
func (UnimplementedWalletServiceServer) EstimateFees(context.Context, *EstimateFeesRequest) (*EstimateFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateFees not implemented")
}
func (UnimplementedWalletServiceServer) MinRelayFee(context.Context, *MinRelayFeeRequest) (*MinRelayFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinRelayFee not implemented")
}
func (UnimplementedWalletServiceServer) MinRelayFeeRate(context.Context, *MinRelayFeeRateRequest) (*MinRelayFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinRelayFeeRate not implemented")
}
func (UnimplementedWalletServiceServer) ListConnectorUtxos(context.Context, *ListConnectorUtxosRequest) (*ListConnectorUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorUtxos not implemented")
}
func (UnimplementedWalletServiceServer) MainAccountBalance(context.Context, *MainAccountBalanceRequest) (*MainAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainAccountBalance not implemented")
}
func (UnimplementedWalletServiceServer) ConnectorsAccountBalance(context.Context, *ConnectorsAccountBalanceRequest) (*ConnectorsAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorsAccountBalance not implemented")
}
func (UnimplementedWalletServiceServer) LockConnectorUtxos(context.Context, *LockConnectorUtxosRequest) (*LockConnectorUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockConnectorUtxos not implemented")
}
func (UnimplementedWalletServiceServer) GetDustAmount(context.Context, *GetDustAmountRequest) (*GetDustAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDustAmount not implemented")
}
func (UnimplementedWalletServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedWalletServiceServer) SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedWalletServiceServer) VerifyMessageSignature(context.Context, *VerifyMessageSignatureRequest) (*VerifyMessageSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMessageSignature not implemented")
}
func (UnimplementedWalletServiceServer) GetCurrentBlockTime(context.Context, *GetCurrentBlockTimeRequest) (*GetCurrentBlockTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBlockTime not implemented")
}
func (UnimplementedWalletServiceServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWalletServiceServer) WatchScripts(context.Context, *WatchScriptsRequest) (*WatchScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchScripts not implemented")
}
func (UnimplementedWalletServiceServer) UnwatchScripts(context.Context, *UnwatchScriptsRequest) (*UnwatchScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchScripts not implemented")
}
func (UnimplementedWalletServiceServer) NotificationStream(*NotificationStreamRequest, WalletService_NotificationStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NotificationStream not implemented")
}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GenSeed(ctx, req.(*GenSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/GetPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetPubkey(ctx, req.(*GetPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetForfeitAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForfeitAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetForfeitAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/GetForfeitAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetForfeitAddress(ctx, req.(*GetForfeitAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeriveConnectorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveConnectorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeriveConnectorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/DeriveConnectorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeriveConnectorAddress(ctx, req.(*DeriveConnectorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeriveAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeriveAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/DeriveAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeriveAddresses(ctx, req.(*DeriveAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignTransactionTapscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionTapscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignTransactionTapscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/SignTransactionTapscript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignTransactionTapscript(ctx, req.(*SignTransactionTapscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SelectUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SelectUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/SelectUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SelectUtxos(ctx, req.(*SelectUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).BroadcastTransaction(ctx, req.(*BroadcastTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WaitForSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WaitForSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/WaitForSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WaitForSync(ctx, req.(*WaitForSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetSyncedUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSyncedUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).GetSyncedUpdate(m, &walletServiceGetSyncedUpdateServer{stream})
}

type WalletService_GetSyncedUpdateServer interface {
	Send(*GetSyncedUpdateResponse) error
	grpc.ServerStream
}

type walletServiceGetSyncedUpdateServer struct {
	grpc.ServerStream
}

func (x *walletServiceGetSyncedUpdateServer) Send(m *GetSyncedUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_IsTransactionConfirmed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTransactionConfirmedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).IsTransactionConfirmed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/IsTransactionConfirmed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).IsTransactionConfirmed(ctx, req.(*IsTransactionConfirmedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_EstimateFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).EstimateFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/EstimateFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).EstimateFees(ctx, req.(*EstimateFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_MinRelayFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinRelayFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).MinRelayFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/MinRelayFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).MinRelayFee(ctx, req.(*MinRelayFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_MinRelayFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinRelayFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).MinRelayFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/MinRelayFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).MinRelayFeeRate(ctx, req.(*MinRelayFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListConnectorUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListConnectorUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/ListConnectorUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListConnectorUtxos(ctx, req.(*ListConnectorUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_MainAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).MainAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/MainAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).MainAccountBalance(ctx, req.(*MainAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ConnectorsAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorsAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ConnectorsAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/ConnectorsAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ConnectorsAccountBalance(ctx, req.(*ConnectorsAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_LockConnectorUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockConnectorUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).LockConnectorUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/LockConnectorUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).LockConnectorUtxos(ctx, req.(*LockConnectorUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetDustAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDustAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetDustAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/GetDustAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetDustAmount(ctx, req.(*GetDustAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_VerifyMessageSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMessageSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).VerifyMessageSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/VerifyMessageSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).VerifyMessageSignature(ctx, req.(*VerifyMessageSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetCurrentBlockTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBlockTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetCurrentBlockTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/GetCurrentBlockTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetCurrentBlockTime(ctx, req.(*GetCurrentBlockTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WatchScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WatchScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/WatchScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WatchScripts(ctx, req.(*WatchScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_UnwatchScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwatchScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UnwatchScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkwallet.v1.WalletService/UnwatchScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UnwatchScripts(ctx, req.(*UnwatchScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_NotificationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).NotificationStream(m, &walletServiceNotificationStreamServer{stream})
}

type WalletService_NotificationStreamServer interface {
	Send(*NotificationStreamResponse) error
	grpc.ServerStream
}

type walletServiceNotificationStreamServer struct {
	grpc.ServerStream
}

func (x *walletServiceNotificationStreamServer) Send(m *NotificationStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arkwallet.v1.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenSeed",
			Handler:    _WalletService_GenSeed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _WalletService_Create_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _WalletService_Restore_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _WalletService_Unlock_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _WalletService_Lock_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _WalletService_Status_Handler,
		},
		{
			MethodName: "GetPubkey",
			Handler:    _WalletService_GetPubkey_Handler,
		},
		{
			MethodName: "GetForfeitAddress",
			Handler:    _WalletService_GetForfeitAddress_Handler,
		},
		{
			MethodName: "DeriveConnectorAddress",
			Handler:    _WalletService_DeriveConnectorAddress_Handler,
		},
		{
			MethodName: "DeriveAddresses",
			Handler:    _WalletService_DeriveAddresses_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _WalletService_SignTransaction_Handler,
		},
		{
			MethodName: "SignTransactionTapscript",
			Handler:    _WalletService_SignTransactionTapscript_Handler,
		},
		{
			MethodName: "SelectUtxos",
			Handler:    _WalletService_SelectUtxos_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _WalletService_BroadcastTransaction_Handler,
		},
		{
			MethodName: "WaitForSync",
			Handler:    _WalletService_WaitForSync_Handler,
		},
		{
			MethodName: "IsTransactionConfirmed",
			Handler:    _WalletService_IsTransactionConfirmed_Handler,
		},
		{
			MethodName: "EstimateFees",
			Handler:    _WalletService_EstimateFees_Handler,
		},
		{
			MethodName: "MinRelayFee",
			Handler:    _WalletService_MinRelayFee_Handler,
		},
		{
			MethodName: "MinRelayFeeRate",
			Handler:    _WalletService_MinRelayFeeRate_Handler,
		},
		{
			MethodName: "ListConnectorUtxos",
			Handler:    _WalletService_ListConnectorUtxos_Handler,
		},
		{
			MethodName: "MainAccountBalance",
			Handler:    _WalletService_MainAccountBalance_Handler,
		},
		{
			MethodName: "ConnectorsAccountBalance",
			Handler:    _WalletService_ConnectorsAccountBalance_Handler,
		},
		{
			MethodName: "LockConnectorUtxos",
			Handler:    _WalletService_LockConnectorUtxos_Handler,
		},
		{
			MethodName: "GetDustAmount",
			Handler:    _WalletService_GetDustAmount_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _WalletService_GetTransaction_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _WalletService_SignMessage_Handler,
		},
		{
			MethodName: "VerifyMessageSignature",
			Handler:    _WalletService_VerifyMessageSignature_Handler,
		},
		{
			MethodName: "GetCurrentBlockTime",
			Handler:    _WalletService_GetCurrentBlockTime_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _WalletService_Withdraw_Handler,
		},
		{
			MethodName: "WatchScripts",
			Handler:    _WalletService_WatchScripts_Handler,
		},
		{
			MethodName: "UnwatchScripts",
			Handler:    _WalletService_UnwatchScripts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSyncedUpdate",
			Handler:       _WalletService_GetSyncedUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NotificationStream",
			Handler:       _WalletService_NotificationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arkwallet/v1/bitcoin_wallet.proto",
}
