AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for Orchestrator and Clients Infrastructure with Simplifications

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  SubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the subnet
  AvailabilityZone:
    Type: String
    Default: eu-central-1a
    Description: Availability Zone
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
  InstanceType:
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    Description: EC2 Instance Type
  AMI:
    Type: AWS::EC2::Image::Id
    Default: ami-0084a47cc718c111a
    Description: Ubuntu Server 24.04 in eu-central-1
  OrchestratorPort:
    Type: Number
    Default: 9000
    Description: Port on which the orchestrator listens
  AspPort:
    Type: Number
    Default: 7070
    Description: Port on which the ASP listens
  GitRepoURL:
    Type: String
    Description: URL of the Git repository to clone
  GitBranch:
    Type: String
    Default: master
    Description: Git branch to checkout (optional)
  GoVersion:
    Type: String
    Default: "1.23.1"
    Description: Version of Go to install

Resources:

  ### VPC and Networking ###

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: OrchestratorVPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: OrchestratorSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: OrchestratorInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: OrchestratorRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  ### Security Group ###

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Orchestrator EC2 Instance and Clients
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref OrchestratorPort
          ToPort: !Ref OrchestratorPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref AspPort
          ToPort: !Ref AspPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: OrchestratorSecurityGroup

  ### ECR Repository ###

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: ark-client-repo

  ### IAM Role for Orchestrator EC2 Instance ###

  OrchestratorInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  OrchestratorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref OrchestratorInstanceRole

  ### EC2 Instance for Orchestrator and ASP ###

  OrchestratorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref OrchestratorInstanceProfile
      KeyName: !Ref KeyPairName
      ImageId: !Ref AMI
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp3  # Optional, can specify desired volume type
            DeleteOnTermination: true
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: OrchestratorInstance
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          # set -e  # Commented out for debugging

          echo "Updating package list..."
          apt-get update -y

          echo "Installing Docker..."
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu

          echo "Installing Docker Compose..."
          curl -L "https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          echo "Installing Go..."
          wget https://dl.google.com/go/go${GoVersion}.linux-amd64.tar.gz
          tar -C /usr/local -xzf go${GoVersion}.linux-amd64.tar.gz
          ln -s /usr/local/go/bin/go /usr/local/bin/go
          echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
          source /etc/profile

          echo "Installing build tools and utilities..."
          apt-get install -y build-essential curl jq git unzip

          echo "Installing AWS CLI v2..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

          echo "Installing Nigiri..."
          curl https://getnigiri.vulpem.com | sudo bash

          echo "Cloning the repository..."
          cd /home/ubuntu
          REPO_URL="${GitRepoURL}"
          BRANCH="${GitBranch}"
          echo "REPO_URL is: $REPO_URL"
          echo "BRANCH is: $BRANCH"
          if [ -n "$BRANCH" ] && [ "$BRANCH" != "master" ]; then
            git clone -b $BRANCH $REPO_URL
          else
            git clone $REPO_URL
          fi

          chown -R ubuntu:ubuntu /home/ubuntu

          echo "Switching to ubuntu user..."
          sudo -u ubuntu bash << EOF

          echo "Inside ubuntu user context..."
          export AWS_REGION="${AWS::Region}"
          AWS_ACCOUNT_ID=\$(aws sts get-caller-identity --query Account --output text)
          export AWS_ACCOUNT_ID
          export SUBNET_IDS="${Subnet}"
          export SECURITY_GROUP_IDS="${SecurityGroup}"
          echo "AWS_REGION is: \$AWS_REGION"
          echo "AWS_ACCOUNT_ID is: \$AWS_ACCOUNT_ID"
          echo "SUBNET_IDS is: \$SUBNET_IDS"
          echo "SECURITY_GROUP_IDS is: \$SECURITY_GROUP_IDS"

          cd /home/ubuntu/$(basename $REPO_URL .git)/simulation
          
          echo "Running nigiri..."
          nigiri start

          echo "Running make push-to-ecr..."
          cd simulation & make push-to-ecr AWS_ACCOUNT_ID=\$AWS_ACCOUNT_ID AWS_REGION=\$AWS_REGION

          EOF
          
          echo "Allowing port 9000..."
          sudo ufw allow 9000/tcp
        - Subnet: !Ref Subnet
          SecurityGroup: !Ref SecurityGroup

  ### CloudWatch Logs Group ###

  ClientLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ClientContainer
      RetentionInDays: 7  # Adjust as needed

  ### ECS Cluster and Task Definition ###

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: OrchestratorCluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:log-group:/ecs/ClientContainer:*"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ClientTaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: ClientContainer
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ark-client-repo:latest"
          Essential: true
          Environment:
            - Name: ASP_URL
              Value: !Sub "${OrchestratorInstance.PrivateIp}:${AspPort}"
            - Name: ORCHESTRATOR_URL
              Value: !Sub "${OrchestratorInstance.PrivateIp}:${OrchestratorPort}"
            - Name: EXPLORER_URL
              Value: !Sub "${OrchestratorInstance.PrivateIp}:3000"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/ClientContainer
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

Outputs:
  OrchestratorInstanceID:
    Description: Instance ID of the Orchestrator EC2 instance
    Value: !Ref OrchestratorInstance

  OrchestratorPrivateIP:
    Description: Private IP of the Orchestrator EC2 instance
    Value: !GetAtt OrchestratorInstance.PrivateIp

  OrchestratorPublicIP:
    Description: Public IP of the Orchestrator EC2 instance
    Value: !GetAtt OrchestratorInstance.PublicIp

  VPCID:
    Description: VPC ID
    Value: !Ref VPC

  SubnetID:
    Description: Subnet ID
    Value: !Ref Subnet

  SecurityGroupID:
    Description: Security Group ID
    Value: !Ref SecurityGroup

  ECRRepositoryURI:
    Description: URI of the ECR Repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ark-client-repo"
