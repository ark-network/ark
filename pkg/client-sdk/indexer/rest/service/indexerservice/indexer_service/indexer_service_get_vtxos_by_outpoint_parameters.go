// Code generated by go-swagger; DO NOT EDIT.

package indexer_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIndexerServiceGetVtxosByOutpointParams creates a new IndexerServiceGetVtxosByOutpointParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIndexerServiceGetVtxosByOutpointParams() *IndexerServiceGetVtxosByOutpointParams {
	return &IndexerServiceGetVtxosByOutpointParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIndexerServiceGetVtxosByOutpointParamsWithTimeout creates a new IndexerServiceGetVtxosByOutpointParams object
// with the ability to set a timeout on a request.
func NewIndexerServiceGetVtxosByOutpointParamsWithTimeout(timeout time.Duration) *IndexerServiceGetVtxosByOutpointParams {
	return &IndexerServiceGetVtxosByOutpointParams{
		timeout: timeout,
	}
}

// NewIndexerServiceGetVtxosByOutpointParamsWithContext creates a new IndexerServiceGetVtxosByOutpointParams object
// with the ability to set a context for a request.
func NewIndexerServiceGetVtxosByOutpointParamsWithContext(ctx context.Context) *IndexerServiceGetVtxosByOutpointParams {
	return &IndexerServiceGetVtxosByOutpointParams{
		Context: ctx,
	}
}

// NewIndexerServiceGetVtxosByOutpointParamsWithHTTPClient creates a new IndexerServiceGetVtxosByOutpointParams object
// with the ability to set a custom HTTPClient for a request.
func NewIndexerServiceGetVtxosByOutpointParamsWithHTTPClient(client *http.Client) *IndexerServiceGetVtxosByOutpointParams {
	return &IndexerServiceGetVtxosByOutpointParams{
		HTTPClient: client,
	}
}

/*
IndexerServiceGetVtxosByOutpointParams contains all the parameters to send to the API endpoint

	for the indexer service get vtxos by outpoint operation.

	Typically these are written to a http.Request.
*/
type IndexerServiceGetVtxosByOutpointParams struct {

	// Outpoints.
	Outpoints []string

	// PageIndex.
	//
	// Format: int32
	PageIndex *int32

	// PageSize.
	//
	// Format: int32
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the indexer service get vtxos by outpoint params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IndexerServiceGetVtxosByOutpointParams) WithDefaults() *IndexerServiceGetVtxosByOutpointParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the indexer service get vtxos by outpoint params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IndexerServiceGetVtxosByOutpointParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) WithTimeout(timeout time.Duration) *IndexerServiceGetVtxosByOutpointParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) WithContext(ctx context.Context) *IndexerServiceGetVtxosByOutpointParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) WithHTTPClient(client *http.Client) *IndexerServiceGetVtxosByOutpointParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOutpoints adds the outpoints to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) WithOutpoints(outpoints []string) *IndexerServiceGetVtxosByOutpointParams {
	o.SetOutpoints(outpoints)
	return o
}

// SetOutpoints adds the outpoints to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) SetOutpoints(outpoints []string) {
	o.Outpoints = outpoints
}

// WithPageIndex adds the pageIndex to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) WithPageIndex(pageIndex *int32) *IndexerServiceGetVtxosByOutpointParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) SetPageIndex(pageIndex *int32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) WithPageSize(pageSize *int32) *IndexerServiceGetVtxosByOutpointParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the indexer service get vtxos by outpoint params
func (o *IndexerServiceGetVtxosByOutpointParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *IndexerServiceGetVtxosByOutpointParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Outpoints != nil {

		// binding items for outpoints
		joinedOutpoints := o.bindParamOutpoints(reg)

		// path array param outpoints
		// SetPathParam does not support variadic arguments, since we used JoinByFormat
		// we can send the first item in the array as it's all the items of the previous
		// array joined together
		if len(joinedOutpoints) > 0 {
			if err := r.SetPathParam("outpoints", joinedOutpoints[0]); err != nil {
				return err
			}
		}
	}

	if o.PageIndex != nil {

		// query param page.index
		var qrPageIndex int32

		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatInt32(qrPageIndex)
		if qPageIndex != "" {

			if err := r.SetQueryParam("page.index", qPageIndex); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page.size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page.size", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamIndexerServiceGetVtxosByOutpoint binds the parameter outpoints
func (o *IndexerServiceGetVtxosByOutpointParams) bindParamOutpoints(formats strfmt.Registry) []string {
	outpointsIR := o.Outpoints

	var outpointsIC []string
	for _, outpointsIIR := range outpointsIR { // explode []string

		outpointsIIV := outpointsIIR // string as string
		outpointsIC = append(outpointsIC, outpointsIIV)
	}

	// items.CollectionFormat: "csv"
	outpointsIS := swag.JoinByFormat(outpointsIC, "csv")

	return outpointsIS
}
