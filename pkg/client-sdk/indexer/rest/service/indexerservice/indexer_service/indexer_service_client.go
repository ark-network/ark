// Code generated by go-swagger; DO NOT EDIT.

package indexer_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new indexer service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new indexer service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new indexer service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for indexer service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	IndexerServiceGetCommitmentTx(params *IndexerServiceGetCommitmentTxParams, opts ...ClientOption) (*IndexerServiceGetCommitmentTxOK, error)

	IndexerServiceGetCommitmentTxLeaves(params *IndexerServiceGetCommitmentTxLeavesParams, opts ...ClientOption) (*IndexerServiceGetCommitmentTxLeavesOK, error)

	IndexerServiceGetConnectors(params *IndexerServiceGetConnectorsParams, opts ...ClientOption) (*IndexerServiceGetConnectorsOK, error)

	IndexerServiceGetForfeitTxs(params *IndexerServiceGetForfeitTxsParams, opts ...ClientOption) (*IndexerServiceGetForfeitTxsOK, error)

	IndexerServiceGetSweptCommitmentTx(params *IndexerServiceGetSweptCommitmentTxParams, opts ...ClientOption) (*IndexerServiceGetSweptCommitmentTxOK, error)

	IndexerServiceGetTransactionHistory(params *IndexerServiceGetTransactionHistoryParams, opts ...ClientOption) (*IndexerServiceGetTransactionHistoryOK, error)

	IndexerServiceGetVirtualTxs(params *IndexerServiceGetVirtualTxsParams, opts ...ClientOption) (*IndexerServiceGetVirtualTxsOK, error)

	IndexerServiceGetVtxoChain(params *IndexerServiceGetVtxoChainParams, opts ...ClientOption) (*IndexerServiceGetVtxoChainOK, error)

	IndexerServiceGetVtxoTree(params *IndexerServiceGetVtxoTreeParams, opts ...ClientOption) (*IndexerServiceGetVtxoTreeOK, error)

	IndexerServiceGetVtxoTreeLeaves(params *IndexerServiceGetVtxoTreeLeavesParams, opts ...ClientOption) (*IndexerServiceGetVtxoTreeLeavesOK, error)

	IndexerServiceGetVtxos(params *IndexerServiceGetVtxosParams, opts ...ClientOption) (*IndexerServiceGetVtxosOK, error)

	IndexerServiceGetVtxosByOutpoint(params *IndexerServiceGetVtxosByOutpointParams, opts ...ClientOption) (*IndexerServiceGetVtxosByOutpointOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
IndexerServiceGetCommitmentTx indexer service get commitment tx API
*/
func (a *Client) IndexerServiceGetCommitmentTx(params *IndexerServiceGetCommitmentTxParams, opts ...ClientOption) (*IndexerServiceGetCommitmentTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetCommitmentTxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetCommitmentTx",
		Method:             "GET",
		PathPattern:        "/v1/commitmentTx/{txid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetCommitmentTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetCommitmentTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetCommitmentTxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetCommitmentTxLeaves indexer service get commitment tx leaves API
*/
func (a *Client) IndexerServiceGetCommitmentTxLeaves(params *IndexerServiceGetCommitmentTxLeavesParams, opts ...ClientOption) (*IndexerServiceGetCommitmentTxLeavesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetCommitmentTxLeavesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetCommitmentTxLeaves",
		Method:             "GET",
		PathPattern:        "/v1/commitmentTx/{txid}/leaves",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetCommitmentTxLeavesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetCommitmentTxLeavesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetCommitmentTxLeavesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetConnectors indexer service get connectors API
*/
func (a *Client) IndexerServiceGetConnectors(params *IndexerServiceGetConnectorsParams, opts ...ClientOption) (*IndexerServiceGetConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetConnectors",
		Method:             "GET",
		PathPattern:        "/v1/commitmentTx/{txid}/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetConnectorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetConnectorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetForfeitTxs indexer service get forfeit txs API
*/
func (a *Client) IndexerServiceGetForfeitTxs(params *IndexerServiceGetForfeitTxsParams, opts ...ClientOption) (*IndexerServiceGetForfeitTxsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetForfeitTxsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetForfeitTxs",
		Method:             "GET",
		PathPattern:        "/v1/commitmentTx/{txid}/forfeitTxs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetForfeitTxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetForfeitTxsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetForfeitTxsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetSweptCommitmentTx indexer service get swept commitment tx API
*/
func (a *Client) IndexerServiceGetSweptCommitmentTx(params *IndexerServiceGetSweptCommitmentTxParams, opts ...ClientOption) (*IndexerServiceGetSweptCommitmentTxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetSweptCommitmentTxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetSweptCommitmentTx",
		Method:             "GET",
		PathPattern:        "/v1/commitmentTx/{txid}/swept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetSweptCommitmentTxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetSweptCommitmentTxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetSweptCommitmentTxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetTransactionHistory indexer service get transaction history API
*/
func (a *Client) IndexerServiceGetTransactionHistory(params *IndexerServiceGetTransactionHistoryParams, opts ...ClientOption) (*IndexerServiceGetTransactionHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetTransactionHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetTransactionHistory",
		Method:             "GET",
		PathPattern:        "/v1/history/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetTransactionHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetTransactionHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetTransactionHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetVirtualTxs indexer service get virtual txs API
*/
func (a *Client) IndexerServiceGetVirtualTxs(params *IndexerServiceGetVirtualTxsParams, opts ...ClientOption) (*IndexerServiceGetVirtualTxsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetVirtualTxsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetVirtualTxs",
		Method:             "GET",
		PathPattern:        "/v1/virtualTx/{txids}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetVirtualTxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetVirtualTxsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetVirtualTxsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetVtxoChain indexer service get vtxo chain API
*/
func (a *Client) IndexerServiceGetVtxoChain(params *IndexerServiceGetVtxoChainParams, opts ...ClientOption) (*IndexerServiceGetVtxoChainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetVtxoChainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetVtxoChain",
		Method:             "GET",
		PathPattern:        "/v1/vtxo/{outpoint.txid}/{outpoint.vout}/chain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetVtxoChainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetVtxoChainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetVtxoChainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetVtxoTree indexer service get vtxo tree API
*/
func (a *Client) IndexerServiceGetVtxoTree(params *IndexerServiceGetVtxoTreeParams, opts ...ClientOption) (*IndexerServiceGetVtxoTreeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetVtxoTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetVtxoTree",
		Method:             "GET",
		PathPattern:        "/v1/batch/{batchOutpoint.txid}/{batchOutpoint.vout}/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetVtxoTreeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetVtxoTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetVtxoTreeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetVtxoTreeLeaves indexer service get vtxo tree leaves API
*/
func (a *Client) IndexerServiceGetVtxoTreeLeaves(params *IndexerServiceGetVtxoTreeLeavesParams, opts ...ClientOption) (*IndexerServiceGetVtxoTreeLeavesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetVtxoTreeLeavesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetVtxoTreeLeaves",
		Method:             "GET",
		PathPattern:        "/v1/batch/{batchOutpoint.txid}/{batchOutpoint.vout}/tree/leaves",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetVtxoTreeLeavesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetVtxoTreeLeavesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetVtxoTreeLeavesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetVtxos indexer service get vtxos API
*/
func (a *Client) IndexerServiceGetVtxos(params *IndexerServiceGetVtxosParams, opts ...ClientOption) (*IndexerServiceGetVtxosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetVtxosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetVtxos",
		Method:             "GET",
		PathPattern:        "/v1/getVtxos/{addresses}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetVtxosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetVtxosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetVtxosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IndexerServiceGetVtxosByOutpoint indexer service get vtxos by outpoint API
*/
func (a *Client) IndexerServiceGetVtxosByOutpoint(params *IndexerServiceGetVtxosByOutpointParams, opts ...ClientOption) (*IndexerServiceGetVtxosByOutpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexerServiceGetVtxosByOutpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IndexerService_GetVtxosByOutpoint",
		Method:             "GET",
		PathPattern:        "/v1/getVtxosByOutpoint/{outpoints}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexerServiceGetVtxosByOutpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexerServiceGetVtxosByOutpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndexerServiceGetVtxosByOutpointDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
