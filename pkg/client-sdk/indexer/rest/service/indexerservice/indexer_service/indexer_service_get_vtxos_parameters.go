// Code generated by go-swagger; DO NOT EDIT.

package indexer_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIndexerServiceGetVtxosParams creates a new IndexerServiceGetVtxosParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIndexerServiceGetVtxosParams() *IndexerServiceGetVtxosParams {
	return &IndexerServiceGetVtxosParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIndexerServiceGetVtxosParamsWithTimeout creates a new IndexerServiceGetVtxosParams object
// with the ability to set a timeout on a request.
func NewIndexerServiceGetVtxosParamsWithTimeout(timeout time.Duration) *IndexerServiceGetVtxosParams {
	return &IndexerServiceGetVtxosParams{
		timeout: timeout,
	}
}

// NewIndexerServiceGetVtxosParamsWithContext creates a new IndexerServiceGetVtxosParams object
// with the ability to set a context for a request.
func NewIndexerServiceGetVtxosParamsWithContext(ctx context.Context) *IndexerServiceGetVtxosParams {
	return &IndexerServiceGetVtxosParams{
		Context: ctx,
	}
}

// NewIndexerServiceGetVtxosParamsWithHTTPClient creates a new IndexerServiceGetVtxosParams object
// with the ability to set a custom HTTPClient for a request.
func NewIndexerServiceGetVtxosParamsWithHTTPClient(client *http.Client) *IndexerServiceGetVtxosParams {
	return &IndexerServiceGetVtxosParams{
		HTTPClient: client,
	}
}

/*
IndexerServiceGetVtxosParams contains all the parameters to send to the API endpoint

	for the indexer service get vtxos operation.

	Typically these are written to a http.Request.
*/
type IndexerServiceGetVtxosParams struct {

	// Addresses.
	Addresses []string

	// PageIndex.
	//
	// Format: int32
	PageIndex *int32

	// PageSize.
	//
	// Format: int32
	PageSize *int32

	// SpendableOnly.
	SpendableOnly *bool

	// SpentOnly.
	SpentOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the indexer service get vtxos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IndexerServiceGetVtxosParams) WithDefaults() *IndexerServiceGetVtxosParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the indexer service get vtxos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IndexerServiceGetVtxosParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithTimeout(timeout time.Duration) *IndexerServiceGetVtxosParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithContext(ctx context.Context) *IndexerServiceGetVtxosParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithHTTPClient(client *http.Client) *IndexerServiceGetVtxosParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddresses adds the addresses to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithAddresses(addresses []string) *IndexerServiceGetVtxosParams {
	o.SetAddresses(addresses)
	return o
}

// SetAddresses adds the addresses to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetAddresses(addresses []string) {
	o.Addresses = addresses
}

// WithPageIndex adds the pageIndex to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithPageIndex(pageIndex *int32) *IndexerServiceGetVtxosParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetPageIndex(pageIndex *int32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithPageSize(pageSize *int32) *IndexerServiceGetVtxosParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSpendableOnly adds the spendableOnly to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithSpendableOnly(spendableOnly *bool) *IndexerServiceGetVtxosParams {
	o.SetSpendableOnly(spendableOnly)
	return o
}

// SetSpendableOnly adds the spendableOnly to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetSpendableOnly(spendableOnly *bool) {
	o.SpendableOnly = spendableOnly
}

// WithSpentOnly adds the spentOnly to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) WithSpentOnly(spentOnly *bool) *IndexerServiceGetVtxosParams {
	o.SetSpentOnly(spentOnly)
	return o
}

// SetSpentOnly adds the spentOnly to the indexer service get vtxos params
func (o *IndexerServiceGetVtxosParams) SetSpentOnly(spentOnly *bool) {
	o.SpentOnly = spentOnly
}

// WriteToRequest writes these params to a swagger request
func (o *IndexerServiceGetVtxosParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Addresses != nil {

		// binding items for addresses
		joinedAddresses := o.bindParamAddresses(reg)

		// path array param addresses
		// SetPathParam does not support variadic arguments, since we used JoinByFormat
		// we can send the first item in the array as it's all the items of the previous
		// array joined together
		if len(joinedAddresses) > 0 {
			if err := r.SetPathParam("addresses", joinedAddresses[0]); err != nil {
				return err
			}
		}
	}

	if o.PageIndex != nil {

		// query param page.index
		var qrPageIndex int32

		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatInt32(qrPageIndex)
		if qPageIndex != "" {

			if err := r.SetQueryParam("page.index", qPageIndex); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page.size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page.size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.SpendableOnly != nil {

		// query param spendableOnly
		var qrSpendableOnly bool

		if o.SpendableOnly != nil {
			qrSpendableOnly = *o.SpendableOnly
		}
		qSpendableOnly := swag.FormatBool(qrSpendableOnly)
		if qSpendableOnly != "" {

			if err := r.SetQueryParam("spendableOnly", qSpendableOnly); err != nil {
				return err
			}
		}
	}

	if o.SpentOnly != nil {

		// query param spentOnly
		var qrSpentOnly bool

		if o.SpentOnly != nil {
			qrSpentOnly = *o.SpentOnly
		}
		qSpentOnly := swag.FormatBool(qrSpentOnly)
		if qSpentOnly != "" {

			if err := r.SetQueryParam("spentOnly", qSpentOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamIndexerServiceGetVtxos binds the parameter addresses
func (o *IndexerServiceGetVtxosParams) bindParamAddresses(formats strfmt.Registry) []string {
	addressesIR := o.Addresses

	var addressesIC []string
	for _, addressesIIR := range addressesIR { // explode []string

		addressesIIV := addressesIIR // string as string
		addressesIC = append(addressesIC, addressesIIV)
	}

	// items.CollectionFormat: "csv"
	addressesIS := swag.JoinByFormat(addressesIC, "csv")

	return addressesIS
}
