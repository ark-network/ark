// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1IndexerTxType v1 indexer tx type
//
// swagger:model v1IndexerTxType
type V1IndexerTxType string

func NewV1IndexerTxType(value V1IndexerTxType) *V1IndexerTxType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1IndexerTxType.
func (m V1IndexerTxType) Pointer() *V1IndexerTxType {
	return &m
}

const (

	// V1IndexerTxTypeINDEXERTXTYPEUNSPECIFIED captures enum value "INDEXER_TX_TYPE_UNSPECIFIED"
	V1IndexerTxTypeINDEXERTXTYPEUNSPECIFIED V1IndexerTxType = "INDEXER_TX_TYPE_UNSPECIFIED"

	// V1IndexerTxTypeINDEXERTXTYPERECEIVED captures enum value "INDEXER_TX_TYPE_RECEIVED"
	V1IndexerTxTypeINDEXERTXTYPERECEIVED V1IndexerTxType = "INDEXER_TX_TYPE_RECEIVED"

	// V1IndexerTxTypeINDEXERTXTYPESENT captures enum value "INDEXER_TX_TYPE_SENT"
	V1IndexerTxTypeINDEXERTXTYPESENT V1IndexerTxType = "INDEXER_TX_TYPE_SENT"
)

// for schema
var v1IndexerTxTypeEnum []interface{}

func init() {
	var res []V1IndexerTxType
	if err := json.Unmarshal([]byte(`["INDEXER_TX_TYPE_UNSPECIFIED","INDEXER_TX_TYPE_RECEIVED","INDEXER_TX_TYPE_SENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IndexerTxTypeEnum = append(v1IndexerTxTypeEnum, v)
	}
}

func (m V1IndexerTxType) validateV1IndexerTxTypeEnum(path, location string, value V1IndexerTxType) error {
	if err := validate.EnumCase(path, location, value, v1IndexerTxTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 indexer tx type
func (m V1IndexerTxType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1IndexerTxTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 indexer tx type based on context it is used
func (m V1IndexerTxType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
