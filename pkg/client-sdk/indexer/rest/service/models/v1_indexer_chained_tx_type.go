// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1IndexerChainedTxType v1 indexer chained tx type
//
// swagger:model v1IndexerChainedTxType
type V1IndexerChainedTxType string

func NewV1IndexerChainedTxType(value V1IndexerChainedTxType) *V1IndexerChainedTxType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1IndexerChainedTxType.
func (m V1IndexerChainedTxType) Pointer() *V1IndexerChainedTxType {
	return &m
}

const (

	// V1IndexerChainedTxTypeINDEXERCHAINEDTXTYPEUNSPECIFIED captures enum value "INDEXER_CHAINED_TX_TYPE_UNSPECIFIED"
	V1IndexerChainedTxTypeINDEXERCHAINEDTXTYPEUNSPECIFIED V1IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_UNSPECIFIED"

	// V1IndexerChainedTxTypeINDEXERCHAINEDTXTYPEVIRTUAL captures enum value "INDEXER_CHAINED_TX_TYPE_VIRTUAL"
	V1IndexerChainedTxTypeINDEXERCHAINEDTXTYPEVIRTUAL V1IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_VIRTUAL"

	// V1IndexerChainedTxTypeINDEXERCHAINEDTXTYPECOMMITMENT captures enum value "INDEXER_CHAINED_TX_TYPE_COMMITMENT"
	V1IndexerChainedTxTypeINDEXERCHAINEDTXTYPECOMMITMENT V1IndexerChainedTxType = "INDEXER_CHAINED_TX_TYPE_COMMITMENT"
)

// for schema
var v1IndexerChainedTxTypeEnum []interface{}

func init() {
	var res []V1IndexerChainedTxType
	if err := json.Unmarshal([]byte(`["INDEXER_CHAINED_TX_TYPE_UNSPECIFIED","INDEXER_CHAINED_TX_TYPE_VIRTUAL","INDEXER_CHAINED_TX_TYPE_COMMITMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IndexerChainedTxTypeEnum = append(v1IndexerChainedTxTypeEnum, v)
	}
}

func (m V1IndexerChainedTxType) validateV1IndexerChainedTxTypeEnum(path, location string, value V1IndexerChainedTxType) error {
	if err := validate.EnumCase(path, location, value, v1IndexerChainedTxTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 indexer chained tx type
func (m V1IndexerChainedTxType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1IndexerChainedTxTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 indexer chained tx type based on context it is used
func (m V1IndexerChainedTxType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
