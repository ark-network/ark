// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1IndexerTxHistoryRecord v1 indexer tx history record
//
// swagger:model v1IndexerTxHistoryRecord
type V1IndexerTxHistoryRecord struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// commitment txid
	CommitmentTxid string `json:"commitmentTxid,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// is settled
	IsSettled bool `json:"isSettled,omitempty"`

	// settled by
	SettledBy string `json:"settledBy,omitempty"`

	// type
	Type *V1IndexerTxType `json:"type,omitempty"`

	// virtual txid
	VirtualTxid string `json:"virtualTxid,omitempty"`
}

// Validate validates this v1 indexer tx history record
func (m *V1IndexerTxHistoryRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IndexerTxHistoryRecord) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 indexer tx history record based on the context it is used
func (m *V1IndexerTxHistoryRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IndexerTxHistoryRecord) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IndexerTxHistoryRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IndexerTxHistoryRecord) UnmarshalBinary(b []byte) error {
	var res V1IndexerTxHistoryRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
