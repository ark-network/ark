// Code generated by go-swagger; DO NOT EDIT.

package explorer_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ark-network/ark/pkg/client-sdk/client/rest/service/models"
)

// ExplorerServiceSubscribeForAddressReader is a Reader for the ExplorerServiceSubscribeForAddress structure.
type ExplorerServiceSubscribeForAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExplorerServiceSubscribeForAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExplorerServiceSubscribeForAddressOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExplorerServiceSubscribeForAddressDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExplorerServiceSubscribeForAddressOK creates a ExplorerServiceSubscribeForAddressOK with default headers values
func NewExplorerServiceSubscribeForAddressOK() *ExplorerServiceSubscribeForAddressOK {
	return &ExplorerServiceSubscribeForAddressOK{}
}

/*
ExplorerServiceSubscribeForAddressOK describes a response with status code 200, with default header values.

A successful response.(streaming responses)
*/
type ExplorerServiceSubscribeForAddressOK struct {
	Payload *ExplorerServiceSubscribeForAddressOKBody
}

// IsSuccess returns true when this explorer service subscribe for address o k response has a 2xx status code
func (o *ExplorerServiceSubscribeForAddressOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this explorer service subscribe for address o k response has a 3xx status code
func (o *ExplorerServiceSubscribeForAddressOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this explorer service subscribe for address o k response has a 4xx status code
func (o *ExplorerServiceSubscribeForAddressOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this explorer service subscribe for address o k response has a 5xx status code
func (o *ExplorerServiceSubscribeForAddressOK) IsServerError() bool {
	return false
}

// IsCode returns true when this explorer service subscribe for address o k response a status code equal to that given
func (o *ExplorerServiceSubscribeForAddressOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the explorer service subscribe for address o k response
func (o *ExplorerServiceSubscribeForAddressOK) Code() int {
	return 200
}

func (o *ExplorerServiceSubscribeForAddressOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vtxos/{address}/subscribe][%d] explorerServiceSubscribeForAddressOK %s", 200, payload)
}

func (o *ExplorerServiceSubscribeForAddressOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vtxos/{address}/subscribe][%d] explorerServiceSubscribeForAddressOK %s", 200, payload)
}

func (o *ExplorerServiceSubscribeForAddressOK) GetPayload() *ExplorerServiceSubscribeForAddressOKBody {
	return o.Payload
}

func (o *ExplorerServiceSubscribeForAddressOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExplorerServiceSubscribeForAddressOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExplorerServiceSubscribeForAddressDefault creates a ExplorerServiceSubscribeForAddressDefault with default headers values
func NewExplorerServiceSubscribeForAddressDefault(code int) *ExplorerServiceSubscribeForAddressDefault {
	return &ExplorerServiceSubscribeForAddressDefault{
		_statusCode: code,
	}
}

/*
ExplorerServiceSubscribeForAddressDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ExplorerServiceSubscribeForAddressDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this explorer service subscribe for address default response has a 2xx status code
func (o *ExplorerServiceSubscribeForAddressDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this explorer service subscribe for address default response has a 3xx status code
func (o *ExplorerServiceSubscribeForAddressDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this explorer service subscribe for address default response has a 4xx status code
func (o *ExplorerServiceSubscribeForAddressDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this explorer service subscribe for address default response has a 5xx status code
func (o *ExplorerServiceSubscribeForAddressDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this explorer service subscribe for address default response a status code equal to that given
func (o *ExplorerServiceSubscribeForAddressDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the explorer service subscribe for address default response
func (o *ExplorerServiceSubscribeForAddressDefault) Code() int {
	return o._statusCode
}

func (o *ExplorerServiceSubscribeForAddressDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vtxos/{address}/subscribe][%d] ExplorerService_SubscribeForAddress default %s", o._statusCode, payload)
}

func (o *ExplorerServiceSubscribeForAddressDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vtxos/{address}/subscribe][%d] ExplorerService_SubscribeForAddress default %s", o._statusCode, payload)
}

func (o *ExplorerServiceSubscribeForAddressDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ExplorerServiceSubscribeForAddressDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ExplorerServiceSubscribeForAddressOKBody Stream result of v1SubscribeForAddressResponse
swagger:model ExplorerServiceSubscribeForAddressOKBody
*/
type ExplorerServiceSubscribeForAddressOKBody struct {

	// error
	Error *models.RPCStatus `json:"error,omitempty"`

	// result
	Result *models.V1SubscribeForAddressResponse `json:"result,omitempty"`
}

// Validate validates this explorer service subscribe for address o k body
func (o *ExplorerServiceSubscribeForAddressOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExplorerServiceSubscribeForAddressOKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *ExplorerServiceSubscribeForAddressOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this explorer service subscribe for address o k body based on the context it is used
func (o *ExplorerServiceSubscribeForAddressOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExplorerServiceSubscribeForAddressOKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *ExplorerServiceSubscribeForAddressOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {

		if swag.IsZero(o.Result) { // not required
			return nil
		}

		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("explorerServiceSubscribeForAddressOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExplorerServiceSubscribeForAddressOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExplorerServiceSubscribeForAddressOKBody) UnmarshalBinary(b []byte) error {
	var res ExplorerServiceSubscribeForAddressOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
