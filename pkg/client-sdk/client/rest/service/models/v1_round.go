// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1Round v1 round
// swagger:model v1Round
type V1Round struct {

	// congestion tree
	CongestionTree *V1Tree `json:"congestionTree,omitempty"`

	// connectors
	Connectors []string `json:"connectors"`

	// end
	End string `json:"end,omitempty"`

	// forfeit txs
	ForfeitTxs []string `json:"forfeitTxs"`

	// id
	ID string `json:"id,omitempty"`

	// payments
	Payments []*V1Payment `json:"payments"`

	// pool tx
	PoolTx string `json:"poolTx,omitempty"`

	// stage
	Stage V1RoundStage `json:"stage,omitempty"`

	// start
	Start string `json:"start,omitempty"`
}

// Validate validates this v1 round
func (m *V1Round) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCongestionTree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Round) validateCongestionTree(formats strfmt.Registry) error {

	if swag.IsZero(m.CongestionTree) { // not required
		return nil
	}

	if m.CongestionTree != nil {
		if err := m.CongestionTree.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("congestionTree")
			}
			return err
		}
	}

	return nil
}

func (m *V1Round) validatePayments(formats strfmt.Registry) error {

	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Round) validateStage(formats strfmt.Registry) error {

	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	if err := m.Stage.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stage")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Round) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Round) UnmarshalBinary(b []byte) error {
	var res V1Round
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
