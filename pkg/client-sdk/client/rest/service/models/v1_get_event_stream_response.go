// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1GetEventStreamResponse v1 get event stream response
//
// swagger:model v1GetEventStreamResponse
type V1GetEventStreamResponse struct {

	// batch failed
	BatchFailed *V1BatchFailed `json:"batchFailed,omitempty"`

	// batch finalization
	BatchFinalization *V1BatchFinalizationEvent `json:"batchFinalization,omitempty"`

	// batch finalized
	BatchFinalized *V1BatchFinalizedEvent `json:"batchFinalized,omitempty"`

	// batch started
	BatchStarted *V1BatchStartedEvent `json:"batchStarted,omitempty"`

	// tree nonces aggregated
	TreeNoncesAggregated *V1TreeNoncesAggregatedEvent `json:"treeNoncesAggregated,omitempty"`

	// tree signature
	TreeSignature *V1TreeSignatureEvent `json:"treeSignature,omitempty"`

	// tree signing started
	TreeSigningStarted *V1TreeSigningStartedEvent `json:"treeSigningStarted,omitempty"`

	// tree tx
	TreeTx *V1TreeTxEvent `json:"treeTx,omitempty"`
}

// Validate validates this v1 get event stream response
func (m *V1GetEventStreamResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchFinalization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchFinalized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeNoncesAggregated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeSigningStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetEventStreamResponse) validateBatchFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchFailed) { // not required
		return nil
	}

	if m.BatchFailed != nil {
		if err := m.BatchFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchFailed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchFailed")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateBatchFinalization(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchFinalization) { // not required
		return nil
	}

	if m.BatchFinalization != nil {
		if err := m.BatchFinalization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchFinalization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchFinalization")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateBatchFinalized(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchFinalized) { // not required
		return nil
	}

	if m.BatchFinalized != nil {
		if err := m.BatchFinalized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchFinalized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchFinalized")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateBatchStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchStarted) { // not required
		return nil
	}

	if m.BatchStarted != nil {
		if err := m.BatchStarted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchStarted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchStarted")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateTreeNoncesAggregated(formats strfmt.Registry) error {
	if swag.IsZero(m.TreeNoncesAggregated) { // not required
		return nil
	}

	if m.TreeNoncesAggregated != nil {
		if err := m.TreeNoncesAggregated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeNoncesAggregated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeNoncesAggregated")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateTreeSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.TreeSignature) { // not required
		return nil
	}

	if m.TreeSignature != nil {
		if err := m.TreeSignature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeSignature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeSignature")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateTreeSigningStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.TreeSigningStarted) { // not required
		return nil
	}

	if m.TreeSigningStarted != nil {
		if err := m.TreeSigningStarted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeSigningStarted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeSigningStarted")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateTreeTx(formats strfmt.Registry) error {
	if swag.IsZero(m.TreeTx) { // not required
		return nil
	}

	if m.TreeTx != nil {
		if err := m.TreeTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeTx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeTx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 get event stream response based on the context it is used
func (m *V1GetEventStreamResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchFinalization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchFinalized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchStarted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTreeNoncesAggregated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTreeSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTreeSigningStarted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTreeTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchFailed != nil {

		if swag.IsZero(m.BatchFailed) { // not required
			return nil
		}

		if err := m.BatchFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchFailed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchFailed")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchFinalization(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchFinalization != nil {

		if swag.IsZero(m.BatchFinalization) { // not required
			return nil
		}

		if err := m.BatchFinalization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchFinalization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchFinalization")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchFinalized(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchFinalized != nil {

		if swag.IsZero(m.BatchFinalized) { // not required
			return nil
		}

		if err := m.BatchFinalized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchFinalized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchFinalized")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchStarted(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchStarted != nil {

		if swag.IsZero(m.BatchStarted) { // not required
			return nil
		}

		if err := m.BatchStarted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchStarted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchStarted")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateTreeNoncesAggregated(ctx context.Context, formats strfmt.Registry) error {

	if m.TreeNoncesAggregated != nil {

		if swag.IsZero(m.TreeNoncesAggregated) { // not required
			return nil
		}

		if err := m.TreeNoncesAggregated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeNoncesAggregated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeNoncesAggregated")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateTreeSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.TreeSignature != nil {

		if swag.IsZero(m.TreeSignature) { // not required
			return nil
		}

		if err := m.TreeSignature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeSignature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeSignature")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateTreeSigningStarted(ctx context.Context, formats strfmt.Registry) error {

	if m.TreeSigningStarted != nil {

		if swag.IsZero(m.TreeSigningStarted) { // not required
			return nil
		}

		if err := m.TreeSigningStarted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeSigningStarted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeSigningStarted")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateTreeTx(ctx context.Context, formats strfmt.Registry) error {

	if m.TreeTx != nil {

		if swag.IsZero(m.TreeTx) { // not required
			return nil
		}

		if err := m.TreeTx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treeTx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treeTx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetEventStreamResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetEventStreamResponse) UnmarshalBinary(b []byte) error {
	var res V1GetEventStreamResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
