// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1GetEventStreamResponse v1 get event stream response
//
// swagger:model v1GetEventStreamResponse
type V1GetEventStreamResponse struct {

	// batch started
	BatchStarted *V1BatchStartedEvent `json:"batchStarted,omitempty"`

	// batch tree
	BatchTree *V1BatchTreeEvent `json:"batchTree,omitempty"`

	// batch tree signature
	BatchTreeSignature *V1BatchTreeSignatureEvent `json:"batchTreeSignature,omitempty"`

	// round failed
	RoundFailed *V1RoundFailed `json:"roundFailed,omitempty"`

	// round finalization
	RoundFinalization *V1RoundFinalizationEvent `json:"roundFinalization,omitempty"`

	// round finalized
	RoundFinalized *V1RoundFinalizedEvent `json:"roundFinalized,omitempty"`

	// round signing
	RoundSigning *V1RoundSigningEvent `json:"roundSigning,omitempty"`

	// round signing nonces generated
	RoundSigningNoncesGenerated *V1RoundSigningNoncesGeneratedEvent `json:"roundSigningNoncesGenerated,omitempty"`
}

// Validate validates this v1 get event stream response
func (m *V1GetEventStreamResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchTree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchTreeSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundFinalization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundFinalized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundSigning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundSigningNoncesGenerated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetEventStreamResponse) validateBatchStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchStarted) { // not required
		return nil
	}

	if m.BatchStarted != nil {
		if err := m.BatchStarted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchStarted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchStarted")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateBatchTree(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchTree) { // not required
		return nil
	}

	if m.BatchTree != nil {
		if err := m.BatchTree.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchTree")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchTree")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateBatchTreeSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchTreeSignature) { // not required
		return nil
	}

	if m.BatchTreeSignature != nil {
		if err := m.BatchTreeSignature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchTreeSignature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchTreeSignature")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateRoundFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.RoundFailed) { // not required
		return nil
	}

	if m.RoundFailed != nil {
		if err := m.RoundFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundFailed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundFailed")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateRoundFinalization(formats strfmt.Registry) error {
	if swag.IsZero(m.RoundFinalization) { // not required
		return nil
	}

	if m.RoundFinalization != nil {
		if err := m.RoundFinalization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundFinalization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundFinalization")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateRoundFinalized(formats strfmt.Registry) error {
	if swag.IsZero(m.RoundFinalized) { // not required
		return nil
	}

	if m.RoundFinalized != nil {
		if err := m.RoundFinalized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundFinalized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundFinalized")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateRoundSigning(formats strfmt.Registry) error {
	if swag.IsZero(m.RoundSigning) { // not required
		return nil
	}

	if m.RoundSigning != nil {
		if err := m.RoundSigning.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundSigning")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundSigning")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) validateRoundSigningNoncesGenerated(formats strfmt.Registry) error {
	if swag.IsZero(m.RoundSigningNoncesGenerated) { // not required
		return nil
	}

	if m.RoundSigningNoncesGenerated != nil {
		if err := m.RoundSigningNoncesGenerated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundSigningNoncesGenerated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundSigningNoncesGenerated")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 get event stream response based on the context it is used
func (m *V1GetEventStreamResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchStarted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchTree(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchTreeSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoundFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoundFinalization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoundFinalized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoundSigning(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoundSigningNoncesGenerated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchStarted(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchStarted != nil {

		if swag.IsZero(m.BatchStarted) { // not required
			return nil
		}

		if err := m.BatchStarted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchStarted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchStarted")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchTree(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchTree != nil {

		if swag.IsZero(m.BatchTree) { // not required
			return nil
		}

		if err := m.BatchTree.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchTree")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchTree")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateBatchTreeSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchTreeSignature != nil {

		if swag.IsZero(m.BatchTreeSignature) { // not required
			return nil
		}

		if err := m.BatchTreeSignature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batchTreeSignature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batchTreeSignature")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateRoundFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.RoundFailed != nil {

		if swag.IsZero(m.RoundFailed) { // not required
			return nil
		}

		if err := m.RoundFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundFailed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundFailed")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateRoundFinalization(ctx context.Context, formats strfmt.Registry) error {

	if m.RoundFinalization != nil {

		if swag.IsZero(m.RoundFinalization) { // not required
			return nil
		}

		if err := m.RoundFinalization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundFinalization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundFinalization")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateRoundFinalized(ctx context.Context, formats strfmt.Registry) error {

	if m.RoundFinalized != nil {

		if swag.IsZero(m.RoundFinalized) { // not required
			return nil
		}

		if err := m.RoundFinalized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundFinalized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundFinalized")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateRoundSigning(ctx context.Context, formats strfmt.Registry) error {

	if m.RoundSigning != nil {

		if swag.IsZero(m.RoundSigning) { // not required
			return nil
		}

		if err := m.RoundSigning.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundSigning")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundSigning")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetEventStreamResponse) contextValidateRoundSigningNoncesGenerated(ctx context.Context, formats strfmt.Registry) error {

	if m.RoundSigningNoncesGenerated != nil {

		if swag.IsZero(m.RoundSigningNoncesGenerated) { // not required
			return nil
		}

		if err := m.RoundSigningNoncesGenerated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roundSigningNoncesGenerated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roundSigningNoncesGenerated")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetEventStreamResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetEventStreamResponse) UnmarshalBinary(b []byte) error {
	var res V1GetEventStreamResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
