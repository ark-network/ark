// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Input v1 input
//
// swagger:model v1Input
type V1Input struct {

	// boarding input
	BoardingInput *V1BoardingInput `json:"boardingInput,omitempty"`

	// vtxo input
	VtxoInput *V1VtxoInput `json:"vtxoInput,omitempty"`
}

// Validate validates this v1 input
func (m *V1Input) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoardingInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVtxoInput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Input) validateBoardingInput(formats strfmt.Registry) error {
	if swag.IsZero(m.BoardingInput) { // not required
		return nil
	}

	if m.BoardingInput != nil {
		if err := m.BoardingInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boardingInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boardingInput")
			}
			return err
		}
	}

	return nil
}

func (m *V1Input) validateVtxoInput(formats strfmt.Registry) error {
	if swag.IsZero(m.VtxoInput) { // not required
		return nil
	}

	if m.VtxoInput != nil {
		if err := m.VtxoInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vtxoInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vtxoInput")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 input based on the context it is used
func (m *V1Input) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoardingInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVtxoInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Input) contextValidateBoardingInput(ctx context.Context, formats strfmt.Registry) error {

	if m.BoardingInput != nil {

		if swag.IsZero(m.BoardingInput) { // not required
			return nil
		}

		if err := m.BoardingInput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boardingInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("boardingInput")
			}
			return err
		}
	}

	return nil
}

func (m *V1Input) contextValidateVtxoInput(ctx context.Context, formats strfmt.Registry) error {

	if m.VtxoInput != nil {

		if swag.IsZero(m.VtxoInput) { // not required
			return nil
		}

		if err := m.VtxoInput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vtxoInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vtxoInput")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Input) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Input) UnmarshalBinary(b []byte) error {
	var res V1Input
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
