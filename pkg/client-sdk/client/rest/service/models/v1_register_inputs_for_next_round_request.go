// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1RegisterInputsForNextRoundRequest v1 register inputs for next round request
//
// swagger:model v1RegisterInputsForNextRoundRequest
type V1RegisterInputsForNextRoundRequest struct {

	// BIP322 signature embeds the outpoints and the proof of funds
	Bip322Signature *V1Bip322Signature `json:"bip322Signature,omitempty"`

	// notes
	Notes []string `json:"notes"`

	// Tapscripts aims to reveal the taproot tree of the unspent & unexpired VTXOs.
	Tapscripts map[string]V1Tapscripts `json:"tapscripts,omitempty"`
}

// Validate validates this v1 register inputs for next round request
func (m *V1RegisterInputsForNextRoundRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBip322Signature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTapscripts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RegisterInputsForNextRoundRequest) validateBip322Signature(formats strfmt.Registry) error {
	if swag.IsZero(m.Bip322Signature) { // not required
		return nil
	}

	if m.Bip322Signature != nil {
		if err := m.Bip322Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bip322Signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bip322Signature")
			}
			return err
		}
	}

	return nil
}

func (m *V1RegisterInputsForNextRoundRequest) validateTapscripts(formats strfmt.Registry) error {
	if swag.IsZero(m.Tapscripts) { // not required
		return nil
	}

	for k := range m.Tapscripts {

		if err := validate.Required("tapscripts"+"."+k, "body", m.Tapscripts[k]); err != nil {
			return err
		}
		if val, ok := m.Tapscripts[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapscripts" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tapscripts" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 register inputs for next round request based on the context it is used
func (m *V1RegisterInputsForNextRoundRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBip322Signature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTapscripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RegisterInputsForNextRoundRequest) contextValidateBip322Signature(ctx context.Context, formats strfmt.Registry) error {

	if m.Bip322Signature != nil {

		if swag.IsZero(m.Bip322Signature) { // not required
			return nil
		}

		if err := m.Bip322Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bip322Signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bip322Signature")
			}
			return err
		}
	}

	return nil
}

func (m *V1RegisterInputsForNextRoundRequest) contextValidateTapscripts(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Tapscripts {

		if val, ok := m.Tapscripts[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1RegisterInputsForNextRoundRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RegisterInputsForNextRoundRequest) UnmarshalBinary(b []byte) error {
	var res V1RegisterInputsForNextRoundRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
