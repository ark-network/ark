// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1GetTransactionsStreamResponse v1 get transactions stream response
//
// swagger:model v1GetTransactionsStreamResponse
type V1GetTransactionsStreamResponse struct {

	// ark tx
	ArkTx *V1TxNotification `json:"arkTx,omitempty"`

	// commitment tx
	CommitmentTx *V1TxNotification `json:"commitmentTx,omitempty"`
}

// Validate validates this v1 get transactions stream response
func (m *V1GetTransactionsStreamResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArkTx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitmentTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetTransactionsStreamResponse) validateArkTx(formats strfmt.Registry) error {
	if swag.IsZero(m.ArkTx) { // not required
		return nil
	}

	if m.ArkTx != nil {
		if err := m.ArkTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arkTx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arkTx")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetTransactionsStreamResponse) validateCommitmentTx(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitmentTx) { // not required
		return nil
	}

	if m.CommitmentTx != nil {
		if err := m.CommitmentTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commitmentTx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commitmentTx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 get transactions stream response based on the context it is used
func (m *V1GetTransactionsStreamResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArkTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitmentTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetTransactionsStreamResponse) contextValidateArkTx(ctx context.Context, formats strfmt.Registry) error {

	if m.ArkTx != nil {

		if swag.IsZero(m.ArkTx) { // not required
			return nil
		}

		if err := m.ArkTx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arkTx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arkTx")
			}
			return err
		}
	}

	return nil
}

func (m *V1GetTransactionsStreamResponse) contextValidateCommitmentTx(ctx context.Context, formats strfmt.Registry) error {

	if m.CommitmentTx != nil {

		if swag.IsZero(m.CommitmentTx) { // not required
			return nil
		}

		if err := m.CommitmentTx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commitmentTx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commitmentTx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetTransactionsStreamResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetTransactionsStreamResponse) UnmarshalBinary(b []byte) error {
	var res V1GetTransactionsStreamResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
