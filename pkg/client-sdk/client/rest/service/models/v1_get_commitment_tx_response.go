// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1GetCommitmentTxResponse v1 get commitment tx response
//
// swagger:model v1GetCommitmentTxResponse
type V1GetCommitmentTxResponse struct {

	// batches
	Batches map[string]V1IndexerBatch `json:"batches,omitempty"`

	// ended at
	EndedAt string `json:"endedAt,omitempty"`

	// started at
	StartedAt string `json:"startedAt,omitempty"`
}

// Validate validates this v1 get commitment tx response
func (m *V1GetCommitmentTxResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetCommitmentTxResponse) validateBatches(formats strfmt.Registry) error {
	if swag.IsZero(m.Batches) { // not required
		return nil
	}

	for k := range m.Batches {

		if err := validate.Required("batches"+"."+k, "body", m.Batches[k]); err != nil {
			return err
		}
		if val, ok := m.Batches[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("batches" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("batches" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 get commitment tx response based on the context it is used
func (m *V1GetCommitmentTxResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetCommitmentTxResponse) contextValidateBatches(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Batches {

		if val, ok := m.Batches[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetCommitmentTxResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetCommitmentTxResponse) UnmarshalBinary(b []byte) error {
	var res V1GetCommitmentTxResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
