// Code generated by go-swagger; DO NOT EDIT.

package admin_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new admin service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AdminServiceGetBalance admin service get balance API
*/
func (a *Client) AdminServiceGetBalance(params *AdminServiceGetBalanceParams) (*AdminServiceGetBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminServiceGetBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminService_GetBalance",
		Method:             "GET",
		PathPattern:        "/v1/admin/balance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminServiceGetBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AdminServiceGetBalanceOK), nil

}

/*
AdminServiceGetRoundDetails admin service get round details API
*/
func (a *Client) AdminServiceGetRoundDetails(params *AdminServiceGetRoundDetailsParams) (*AdminServiceGetRoundDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminServiceGetRoundDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminService_GetRoundDetails",
		Method:             "GET",
		PathPattern:        "/v1/admin/round/{roundId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminServiceGetRoundDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AdminServiceGetRoundDetailsOK), nil

}

/*
AdminServiceGetRounds admin service get rounds API
*/
func (a *Client) AdminServiceGetRounds(params *AdminServiceGetRoundsParams) (*AdminServiceGetRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminServiceGetRoundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminService_GetRounds",
		Method:             "POST",
		PathPattern:        "/v1/admin/rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminServiceGetRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AdminServiceGetRoundsOK), nil

}

/*
AdminServiceGetScheduledSweep admin service get scheduled sweep API
*/
func (a *Client) AdminServiceGetScheduledSweep(params *AdminServiceGetScheduledSweepParams) (*AdminServiceGetScheduledSweepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminServiceGetScheduledSweepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminService_GetScheduledSweep",
		Method:             "GET",
		PathPattern:        "/v1/admin/sweeps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdminServiceGetScheduledSweepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AdminServiceGetScheduledSweepOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
