// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: ocean/v1/transaction.proto

package oceanv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Coin-selection algorithm.
type SelectUtxosRequest_Strategy int32

const (
	SelectUtxosRequest_STRATEGY_UNSPECIFIED  SelectUtxosRequest_Strategy = 0
	SelectUtxosRequest_STRATEGY_BRANCH_BOUND SelectUtxosRequest_Strategy = 1
	SelectUtxosRequest_STRATEGY_FRAGMENT     SelectUtxosRequest_Strategy = 2
)

// Enum value maps for SelectUtxosRequest_Strategy.
var (
	SelectUtxosRequest_Strategy_name = map[int32]string{
		0: "STRATEGY_UNSPECIFIED",
		1: "STRATEGY_BRANCH_BOUND",
		2: "STRATEGY_FRAGMENT",
	}
	SelectUtxosRequest_Strategy_value = map[string]int32{
		"STRATEGY_UNSPECIFIED":  0,
		"STRATEGY_BRANCH_BOUND": 1,
		"STRATEGY_FRAGMENT":     2,
	}
)

func (x SelectUtxosRequest_Strategy) Enum() *SelectUtxosRequest_Strategy {
	p := new(SelectUtxosRequest_Strategy)
	*p = x
	return p
}

func (x SelectUtxosRequest_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectUtxosRequest_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_ocean_v1_transaction_proto_enumTypes[0].Descriptor()
}

func (SelectUtxosRequest_Strategy) Type() protoreflect.EnumType {
	return &file_ocean_v1_transaction_proto_enumTypes[0]
}

func (x SelectUtxosRequest_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectUtxosRequest_Strategy.Descriptor instead.
func (SelectUtxosRequest_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{2, 0}
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *GetTransactionRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw transaction in hex format.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
	// Deatils of the block including the transaction.
	BlockDetails *BlockDetails `protobuf:"bytes,2,opt,name=block_details,json=blockDetails,proto3" json:"block_details,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *GetTransactionResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

func (x *GetTransactionResponse) GetBlockDetails() *BlockDetails {
	if x != nil {
		return x.BlockDetails
	}
	return nil
}

type SelectUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name.
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Asset hash of the utxos to select.
	TargetAsset string `protobuf:"bytes,2,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset,omitempty"`
	// Target amount to cover.
	TargetAmount uint64                      `protobuf:"varint,3,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	Strategy     SelectUtxosRequest_Strategy `protobuf:"varint,4,opt,name=strategy,proto3,enum=ocean.v1.SelectUtxosRequest_Strategy" json:"strategy,omitempty"`
}

func (x *SelectUtxosRequest) Reset() {
	*x = SelectUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectUtxosRequest) ProtoMessage() {}

func (x *SelectUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectUtxosRequest.ProtoReflect.Descriptor instead.
func (*SelectUtxosRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *SelectUtxosRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SelectUtxosRequest) GetTargetAsset() string {
	if x != nil {
		return x.TargetAsset
	}
	return ""
}

func (x *SelectUtxosRequest) GetTargetAmount() uint64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *SelectUtxosRequest) GetStrategy() SelectUtxosRequest_Strategy {
	if x != nil {
		return x.Strategy
	}
	return SelectUtxosRequest_STRATEGY_UNSPECIFIED
}

type SelectUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of selected utxos.
	Utxos []*Utxo `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Eventual change amount if utxos cumulative sum exceeds the target amount.
	Change uint64 `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	// Expiration date for the selected utxo, which are temporary locked to
	// prevent double spending them.
	ExpirationDate int64 `protobuf:"varint,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *SelectUtxosResponse) Reset() {
	*x = SelectUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectUtxosResponse) ProtoMessage() {}

func (x *SelectUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectUtxosResponse.ProtoReflect.Descriptor instead.
func (*SelectUtxosResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *SelectUtxosResponse) GetUtxos() []*Utxo {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *SelectUtxosResponse) GetChange() uint64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *SelectUtxosResponse) GetExpirationDate() int64 {
	if x != nil {
		return x.ExpirationDate
	}
	return 0
}

type LockUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string   `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Utxos       []*Input `protobuf:"bytes,2,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (x *LockUtxosRequest) Reset() {
	*x = LockUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockUtxosRequest) ProtoMessage() {}

func (x *LockUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockUtxosRequest.ProtoReflect.Descriptor instead.
func (*LockUtxosRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *LockUtxosRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *LockUtxosRequest) GetUtxos() []*Input {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type LockUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpirationDate int64 `protobuf:"varint,1,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *LockUtxosResponse) Reset() {
	*x = LockUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockUtxosResponse) ProtoMessage() {}

func (x *LockUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockUtxosResponse.ProtoReflect.Descriptor instead.
func (*LockUtxosResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *LockUtxosResponse) GetExpirationDate() int64 {
	if x != nil {
		return x.ExpirationDate
	}
	return 0
}

type EstimateFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs           []*Input  `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs          []*Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	MillisatsPerByte uint64    `protobuf:"varint,3,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *EstimateFeesRequest) Reset() {
	*x = EstimateFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeesRequest) ProtoMessage() {}

func (x *EstimateFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeesRequest.ProtoReflect.Descriptor instead.
func (*EstimateFeesRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *EstimateFeesRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *EstimateFeesRequest) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *EstimateFeesRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type EstimateFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeAmount uint64 `protobuf:"varint,1,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
}

func (x *EstimateFeesResponse) Reset() {
	*x = EstimateFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeesResponse) ProtoMessage() {}

func (x *EstimateFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeesResponse.ProtoReflect.Descriptor instead.
func (*EstimateFeesResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *EstimateFeesResponse) GetFeeAmount() uint64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw transaction to sign.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
	// The sighash type. SIGHASH_ALL is used if not defined.
	SighashType uint32 `protobuf:"varint,2,opt,name=sighash_type,json=sighashType,proto3" json:"sighash_type,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *SignTransactionRequest) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

func (x *SignTransactionRequest) GetSighashType() uint32 {
	if x != nil {
		return x.SighashType
	}
	return 0
}

type SignTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw signed transaction.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *SignTransactionResponse) Reset() {
	*x = SignTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionResponse) ProtoMessage() {}

func (x *SignTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionResponse.ProtoReflect.Descriptor instead.
func (*SignTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *SignTransactionResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type BroadcastTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction to broadcast.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *BroadcastTransactionRequest) Reset() {
	*x = BroadcastTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastTransactionRequest) ProtoMessage() {}

func (x *BroadcastTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastTransactionRequest.ProtoReflect.Descriptor instead.
func (*BroadcastTransactionRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *BroadcastTransactionRequest) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type BroadcastTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of the broadcasted transaction.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *BroadcastTransactionResponse) Reset() {
	*x = BroadcastTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastTransactionResponse) ProtoMessage() {}

func (x *BroadcastTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastTransactionResponse.ProtoReflect.Descriptor instead.
func (*BroadcastTransactionResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *BroadcastTransactionResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type CreatePsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inputs of the partial transaction.
	Inputs []*Input `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Outputs of the partial transaction
	Outputs []*Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *CreatePsetRequest) Reset() {
	*x = CreatePsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsetRequest) ProtoMessage() {}

func (x *CreatePsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsetRequest.ProtoReflect.Descriptor instead.
func (*CreatePsetRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePsetRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreatePsetRequest) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CreatePsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New partial transaction in base64 format.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
}

func (x *CreatePsetResponse) Reset() {
	*x = CreatePsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsetResponse) ProtoMessage() {}

func (x *CreatePsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsetResponse.ProtoReflect.Descriptor instead.
func (*CreatePsetResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePsetResponse) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

type UpdatePsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partial transaction to update in base64 format.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
	// Inputs to add to the partial transaction.
	Inputs []*Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Outputs to add to the partil transaction.
	Outputs []*Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *UpdatePsetRequest) Reset() {
	*x = UpdatePsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePsetRequest) ProtoMessage() {}

func (x *UpdatePsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePsetRequest.ProtoReflect.Descriptor instead.
func (*UpdatePsetRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatePsetRequest) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

func (x *UpdatePsetRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *UpdatePsetRequest) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type UpdatePsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated partial transaction in base64 format.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
}

func (x *UpdatePsetResponse) Reset() {
	*x = UpdatePsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePsetResponse) ProtoMessage() {}

func (x *UpdatePsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePsetResponse.ProtoReflect.Descriptor instead.
func (*UpdatePsetResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *UpdatePsetResponse) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

type BlindPsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partial transaction with inputs/outputs to blind.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
	// Whether blinding as last blinder.
	LastBlinder bool `protobuf:"varint,2,opt,name=last_blinder,json=lastBlinder,proto3" json:"last_blinder,omitempty"`
	// Optional list of unblinded data related to existing pset inputs in order
	// to make the wallet blind also outputs it wouldn't own otherwise.
	ExtraUnblindedInputs []*UnblindedInput `protobuf:"bytes,3,rep,name=extra_unblinded_inputs,json=extraUnblindedInputs,proto3" json:"extra_unblinded_inputs,omitempty"`
}

func (x *BlindPsetRequest) Reset() {
	*x = BlindPsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindPsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindPsetRequest) ProtoMessage() {}

func (x *BlindPsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindPsetRequest.ProtoReflect.Descriptor instead.
func (*BlindPsetRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *BlindPsetRequest) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

func (x *BlindPsetRequest) GetLastBlinder() bool {
	if x != nil {
		return x.LastBlinder
	}
	return false
}

func (x *BlindPsetRequest) GetExtraUnblindedInputs() []*UnblindedInput {
	if x != nil {
		return x.ExtraUnblindedInputs
	}
	return nil
}

type BlindPsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated partial transaction with blinded inputs/outputs in base64 format.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
}

func (x *BlindPsetResponse) Reset() {
	*x = BlindPsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindPsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindPsetResponse) ProtoMessage() {}

func (x *BlindPsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindPsetResponse.ProtoReflect.Descriptor instead.
func (*BlindPsetResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *BlindPsetResponse) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

type SignPsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partial transaction to sign in base64 format.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
	// The sighash type. If not specified, SIGHASH_ALL is used for any input
	// to sign that doesn't already have one set.
	SighashType uint32 `protobuf:"varint,2,opt,name=sighash_type,json=sighashType,proto3" json:"sighash_type,omitempty"`
}

func (x *SignPsetRequest) Reset() {
	*x = SignPsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPsetRequest) ProtoMessage() {}

func (x *SignPsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPsetRequest.ProtoReflect.Descriptor instead.
func (*SignPsetRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *SignPsetRequest) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

func (x *SignPsetRequest) GetSighashType() uint32 {
	if x != nil {
		return x.SighashType
	}
	return 0
}

type SignPsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed partial transaction in base64 format.
	Pset string `protobuf:"bytes,1,opt,name=pset,proto3" json:"pset,omitempty"`
}

func (x *SignPsetResponse) Reset() {
	*x = SignPsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPsetResponse) ProtoMessage() {}

func (x *SignPsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPsetResponse.ProtoReflect.Descriptor instead.
func (*SignPsetResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *SignPsetResponse) GetPset() string {
	if x != nil {
		return x.Pset
	}
	return ""
}

type MintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name.
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Asset amount to mint.
	AssetAmount uint64 `protobuf:"varint,2,opt,name=asset_amount,json=assetAmount,proto3" json:"asset_amount,omitempty"`
	// Token amount to mint.
	TokenAmount uint64 `protobuf:"varint,3,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	// Name of the asset.
	AssetName string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// Ticker of the asset.
	AssetTicker string `protobuf:"bytes,5,opt,name=asset_ticker,json=assetTicker,proto3" json:"asset_ticker,omitempty"`
	// Domain of the asset.
	AssetDomain string `protobuf:"bytes,6,opt,name=asset_domain,json=assetDomain,proto3" json:"asset_domain,omitempty"`
	// mSats/byte fee ratio.
	MillisatsPerByte uint64 `protobuf:"varint,7,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *MintRequest) Reset() {
	*x = MintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintRequest) ProtoMessage() {}

func (x *MintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintRequest.ProtoReflect.Descriptor instead.
func (*MintRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *MintRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *MintRequest) GetAssetAmount() uint64 {
	if x != nil {
		return x.AssetAmount
	}
	return 0
}

func (x *MintRequest) GetTokenAmount() uint64 {
	if x != nil {
		return x.TokenAmount
	}
	return 0
}

func (x *MintRequest) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *MintRequest) GetAssetTicker() string {
	if x != nil {
		return x.AssetTicker
	}
	return ""
}

func (x *MintRequest) GetAssetDomain() string {
	if x != nil {
		return x.AssetDomain
	}
	return ""
}

func (x *MintRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type MintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed tx in hex format.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *MintResponse) Reset() {
	*x = MintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintResponse) ProtoMessage() {}

func (x *MintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintResponse.ProtoReflect.Descriptor instead.
func (*MintResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *MintResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type RemintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name.
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Hash of the asset to remint.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Amount to remint.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// mSats/byte fee ratio.
	MillisatsPerByte uint64 `protobuf:"varint,4,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *RemintRequest) Reset() {
	*x = RemintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemintRequest) ProtoMessage() {}

func (x *RemintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemintRequest.ProtoReflect.Descriptor instead.
func (*RemintRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{22}
}

func (x *RemintRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *RemintRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *RemintRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RemintRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type RemintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed tx in hex format.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *RemintResponse) Reset() {
	*x = RemintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemintResponse) ProtoMessage() {}

func (x *RemintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemintResponse.ProtoReflect.Descriptor instead.
func (*RemintResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *RemintResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type BurnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name.
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Receivers contains a list of asset-amount to burn and their addresses are
	// ignored and replaced with OP_RETURN output scripts.
	Receivers []*Output `protobuf:"bytes,2,rep,name=receivers,proto3" json:"receivers,omitempty"`
	// mSats/byte fee ratio.
	MillisatsPerByte uint64 `protobuf:"varint,3,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *BurnRequest) Reset() {
	*x = BurnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnRequest) ProtoMessage() {}

func (x *BurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnRequest.ProtoReflect.Descriptor instead.
func (*BurnRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *BurnRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *BurnRequest) GetReceivers() []*Output {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *BurnRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type BurnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed tx in hex format.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *BurnResponse) Reset() {
	*x = BurnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnResponse) ProtoMessage() {}

func (x *BurnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnResponse.ProtoReflect.Descriptor instead.
func (*BurnResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *BurnResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name.
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Receivers are the receivers of the funds.
	Receivers []*Output `protobuf:"bytes,2,rep,name=receivers,proto3" json:"receivers,omitempty"`
	// mSats/byte fee ratio.
	MillisatsPerByte uint64 `protobuf:"varint,3,opt,name=millisats_per_byte,json=millisatsPerByte,proto3" json:"millisats_per_byte,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *TransferRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *TransferRequest) GetReceivers() []*Output {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *TransferRequest) GetMillisatsPerByte() uint64 {
	if x != nil {
		return x.MillisatsPerByte
	}
	return 0
}

type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed tx in hex format.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{27}
}

func (x *TransferResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type PegInAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PegInAddressRequest) Reset() {
	*x = PegInAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PegInAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PegInAddressRequest) ProtoMessage() {}

func (x *PegInAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PegInAddressRequest.ProtoReflect.Descriptor instead.
func (*PegInAddressRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{28}
}

type PegInAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name.
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Main-chain deposit address to send bitcoin to.
	MainChainAddress string `protobuf:"bytes,2,opt,name=main_chain_address,json=mainChainAddress,proto3" json:"main_chain_address,omitempty"`
	// Claim script committed to by the main-chain address.
	ClaimScript string `protobuf:"bytes,3,opt,name=claim_script,json=claimScript,proto3" json:"claim_script,omitempty"`
}

func (x *PegInAddressResponse) Reset() {
	*x = PegInAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PegInAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PegInAddressResponse) ProtoMessage() {}

func (x *PegInAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PegInAddressResponse.ProtoReflect.Descriptor instead.
func (*PegInAddressResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{29}
}

func (x *PegInAddressResponse) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *PegInAddressResponse) GetMainChainAddress() string {
	if x != nil {
		return x.MainChainAddress
	}
	return ""
}

func (x *PegInAddressResponse) GetClaimScript() string {
	if x != nil {
		return x.ClaimScript
	}
	return ""
}

type ClaimPegInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The raw bitcoin transaction (in hex) depositing bitcoin to the main-chain address generated by PegInAddress.
	BitcoinTx string `protobuf:"bytes,1,opt,name=bitcoin_tx,json=bitcoinTx,proto3" json:"bitcoin_tx,omitempty"`
	// A raw tx_out_proof (in hex) generated by the main-chain daemon's `gettxoutproof` containing a proof of only bitcoin_tx.
	TxOutProof string `protobuf:"bytes,2,opt,name=tx_out_proof,json=txOutProof,proto3" json:"tx_out_proof,omitempty"`
	// The witness program generated by PegInAddress.
	ClaimScript string `protobuf:"bytes,3,opt,name=claim_script,json=claimScript,proto3" json:"claim_script,omitempty"`
}

func (x *ClaimPegInRequest) Reset() {
	*x = ClaimPegInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimPegInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimPegInRequest) ProtoMessage() {}

func (x *ClaimPegInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimPegInRequest.ProtoReflect.Descriptor instead.
func (*ClaimPegInRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{30}
}

func (x *ClaimPegInRequest) GetBitcoinTx() string {
	if x != nil {
		return x.BitcoinTx
	}
	return ""
}

func (x *ClaimPegInRequest) GetTxOutProof() string {
	if x != nil {
		return x.TxOutProof
	}
	return ""
}

func (x *ClaimPegInRequest) GetClaimScript() string {
	if x != nil {
		return x.ClaimScript
	}
	return ""
}

type ClaimPegInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed tx in hex format.
	TxHex string `protobuf:"bytes,1,opt,name=tx_hex,json=txHex,proto3" json:"tx_hex,omitempty"`
}

func (x *ClaimPegInResponse) Reset() {
	*x = ClaimPegInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimPegInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimPegInResponse) ProtoMessage() {}

func (x *ClaimPegInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimPegInResponse.ProtoReflect.Descriptor instead.
func (*ClaimPegInResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{31}
}

func (x *ClaimPegInResponse) GetTxHex() string {
	if x != nil {
		return x.TxHex
	}
	return ""
}

type SignPsetWithSchnorrKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partial transaction to sign in base64 format.
	Tx string `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The sighash type. SIGHASH_DEFAULT is used for any input that does not specify one.
	SighashType uint32 `protobuf:"varint,2,opt,name=sighash_type,json=sighashType,proto3" json:"sighash_type,omitempty"`
}

func (x *SignPsetWithSchnorrKeyRequest) Reset() {
	*x = SignPsetWithSchnorrKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPsetWithSchnorrKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPsetWithSchnorrKeyRequest) ProtoMessage() {}

func (x *SignPsetWithSchnorrKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPsetWithSchnorrKeyRequest.ProtoReflect.Descriptor instead.
func (*SignPsetWithSchnorrKeyRequest) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{32}
}

func (x *SignPsetWithSchnorrKeyRequest) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *SignPsetWithSchnorrKeyRequest) GetSighashType() uint32 {
	if x != nil {
		return x.SighashType
	}
	return 0
}

type SignPsetWithSchnorrKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedTx string `protobuf:"bytes,1,opt,name=signed_tx,json=signedTx,proto3" json:"signed_tx,omitempty"`
}

func (x *SignPsetWithSchnorrKeyResponse) Reset() {
	*x = SignPsetWithSchnorrKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_v1_transaction_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPsetWithSchnorrKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPsetWithSchnorrKeyResponse) ProtoMessage() {}

func (x *SignPsetWithSchnorrKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_v1_transaction_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPsetWithSchnorrKeyResponse.ProtoReflect.Descriptor instead.
func (*SignPsetWithSchnorrKeyResponse) Descriptor() ([]byte, []int) {
	return file_ocean_v1_transaction_proto_rawDescGZIP(), []int{33}
}

func (x *SignPsetWithSchnorrKeyResponse) GetSignedTx() string {
	if x != nil {
		return x.SignedTx
	}
	return ""
}

var File_ocean_v1_transaction_proto protoreflect.FileDescriptor

var file_ocean_v1_transaction_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6f, 0x63,
	0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x48, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x63,
	0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x56, 0x0a, 0x08,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x42,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x22, 0x7c, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x75,
	0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x63, 0x65,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x5c, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x74, 0x78,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73,
	0x22, 0x3c, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x98,
	0x01, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x52, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x48, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x78, 0x48, 0x65, 0x78, 0x22, 0x34, 0x0a, 0x1b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x68, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x48, 0x65, 0x78, 0x22, 0x32, 0x0a, 0x1c,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x22, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x73, 0x65, 0x74, 0x22, 0x7c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x65, 0x74, 0x22, 0x99, 0x01, 0x0a,
	0x10, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x6e, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x65,
	0x74, 0x22, 0x48, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x73, 0x65, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22,
	0x25, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x78, 0x48, 0x65, 0x78, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f,
	0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x48, 0x65, 0x78,
	0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x22, 0x25, 0x0a, 0x0c, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x78, 0x48, 0x65, 0x78, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x22, 0x29, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x78, 0x48, 0x65, 0x78, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x65, 0x67, 0x49,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x8a, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x77, 0x0a, 0x11,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x78,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x2b, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65,
	0x67, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x78, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x48,
	0x65, 0x78, 0x22, 0x52, 0x0a, 0x1d, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x68, 0x61,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x1e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x78, 0x32, 0x97, 0x0a, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73,
	0x12, 0x1c, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x1a, 0x2e, 0x6f, 0x63, 0x65,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x63, 0x65, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74, 0x12,
	0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f,
	0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x73, 0x65, 0x74,
	0x12, 0x1a, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f,
	0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x69, 0x67,
	0x6e, 0x50, 0x73, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x50, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6f, 0x63,
	0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e,
	0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x15, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x50, 0x65,
	0x67, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x6f, 0x63, 0x65,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x63, 0x65, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x12, 0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x67, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x2e, 0x6f,
	0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x68,
	0x6e, 0x6f, 0x72, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0xa9, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x42, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x75, 0x6c, 0x70, 0x65, 0x6d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f,
	0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x63, 0x65, 0x61,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4f,
	0x58, 0x58, 0xaa, 0x02, 0x08, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08,
	0x4f, 0x63, 0x65, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x4f, 0x63, 0x65, 0x61, 0x6e,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x09, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ocean_v1_transaction_proto_rawDescOnce sync.Once
	file_ocean_v1_transaction_proto_rawDescData = file_ocean_v1_transaction_proto_rawDesc
)

func file_ocean_v1_transaction_proto_rawDescGZIP() []byte {
	file_ocean_v1_transaction_proto_rawDescOnce.Do(func() {
		file_ocean_v1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocean_v1_transaction_proto_rawDescData)
	})
	return file_ocean_v1_transaction_proto_rawDescData
}

var file_ocean_v1_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ocean_v1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_ocean_v1_transaction_proto_goTypes = []interface{}{
	(SelectUtxosRequest_Strategy)(0),       // 0: ocean.v1.SelectUtxosRequest.Strategy
	(*GetTransactionRequest)(nil),          // 1: ocean.v1.GetTransactionRequest
	(*GetTransactionResponse)(nil),         // 2: ocean.v1.GetTransactionResponse
	(*SelectUtxosRequest)(nil),             // 3: ocean.v1.SelectUtxosRequest
	(*SelectUtxosResponse)(nil),            // 4: ocean.v1.SelectUtxosResponse
	(*LockUtxosRequest)(nil),               // 5: ocean.v1.LockUtxosRequest
	(*LockUtxosResponse)(nil),              // 6: ocean.v1.LockUtxosResponse
	(*EstimateFeesRequest)(nil),            // 7: ocean.v1.EstimateFeesRequest
	(*EstimateFeesResponse)(nil),           // 8: ocean.v1.EstimateFeesResponse
	(*SignTransactionRequest)(nil),         // 9: ocean.v1.SignTransactionRequest
	(*SignTransactionResponse)(nil),        // 10: ocean.v1.SignTransactionResponse
	(*BroadcastTransactionRequest)(nil),    // 11: ocean.v1.BroadcastTransactionRequest
	(*BroadcastTransactionResponse)(nil),   // 12: ocean.v1.BroadcastTransactionResponse
	(*CreatePsetRequest)(nil),              // 13: ocean.v1.CreatePsetRequest
	(*CreatePsetResponse)(nil),             // 14: ocean.v1.CreatePsetResponse
	(*UpdatePsetRequest)(nil),              // 15: ocean.v1.UpdatePsetRequest
	(*UpdatePsetResponse)(nil),             // 16: ocean.v1.UpdatePsetResponse
	(*BlindPsetRequest)(nil),               // 17: ocean.v1.BlindPsetRequest
	(*BlindPsetResponse)(nil),              // 18: ocean.v1.BlindPsetResponse
	(*SignPsetRequest)(nil),                // 19: ocean.v1.SignPsetRequest
	(*SignPsetResponse)(nil),               // 20: ocean.v1.SignPsetResponse
	(*MintRequest)(nil),                    // 21: ocean.v1.MintRequest
	(*MintResponse)(nil),                   // 22: ocean.v1.MintResponse
	(*RemintRequest)(nil),                  // 23: ocean.v1.RemintRequest
	(*RemintResponse)(nil),                 // 24: ocean.v1.RemintResponse
	(*BurnRequest)(nil),                    // 25: ocean.v1.BurnRequest
	(*BurnResponse)(nil),                   // 26: ocean.v1.BurnResponse
	(*TransferRequest)(nil),                // 27: ocean.v1.TransferRequest
	(*TransferResponse)(nil),               // 28: ocean.v1.TransferResponse
	(*PegInAddressRequest)(nil),            // 29: ocean.v1.PegInAddressRequest
	(*PegInAddressResponse)(nil),           // 30: ocean.v1.PegInAddressResponse
	(*ClaimPegInRequest)(nil),              // 31: ocean.v1.ClaimPegInRequest
	(*ClaimPegInResponse)(nil),             // 32: ocean.v1.ClaimPegInResponse
	(*SignPsetWithSchnorrKeyRequest)(nil),  // 33: ocean.v1.SignPsetWithSchnorrKeyRequest
	(*SignPsetWithSchnorrKeyResponse)(nil), // 34: ocean.v1.SignPsetWithSchnorrKeyResponse
	(*BlockDetails)(nil),                   // 35: ocean.v1.BlockDetails
	(*Utxo)(nil),                           // 36: ocean.v1.Utxo
	(*Input)(nil),                          // 37: ocean.v1.Input
	(*Output)(nil),                         // 38: ocean.v1.Output
	(*UnblindedInput)(nil),                 // 39: ocean.v1.UnblindedInput
}
var file_ocean_v1_transaction_proto_depIdxs = []int32{
	35, // 0: ocean.v1.GetTransactionResponse.block_details:type_name -> ocean.v1.BlockDetails
	0,  // 1: ocean.v1.SelectUtxosRequest.strategy:type_name -> ocean.v1.SelectUtxosRequest.Strategy
	36, // 2: ocean.v1.SelectUtxosResponse.utxos:type_name -> ocean.v1.Utxo
	37, // 3: ocean.v1.LockUtxosRequest.utxos:type_name -> ocean.v1.Input
	37, // 4: ocean.v1.EstimateFeesRequest.inputs:type_name -> ocean.v1.Input
	38, // 5: ocean.v1.EstimateFeesRequest.outputs:type_name -> ocean.v1.Output
	37, // 6: ocean.v1.CreatePsetRequest.inputs:type_name -> ocean.v1.Input
	38, // 7: ocean.v1.CreatePsetRequest.outputs:type_name -> ocean.v1.Output
	37, // 8: ocean.v1.UpdatePsetRequest.inputs:type_name -> ocean.v1.Input
	38, // 9: ocean.v1.UpdatePsetRequest.outputs:type_name -> ocean.v1.Output
	39, // 10: ocean.v1.BlindPsetRequest.extra_unblinded_inputs:type_name -> ocean.v1.UnblindedInput
	38, // 11: ocean.v1.BurnRequest.receivers:type_name -> ocean.v1.Output
	38, // 12: ocean.v1.TransferRequest.receivers:type_name -> ocean.v1.Output
	1,  // 13: ocean.v1.TransactionService.GetTransaction:input_type -> ocean.v1.GetTransactionRequest
	3,  // 14: ocean.v1.TransactionService.SelectUtxos:input_type -> ocean.v1.SelectUtxosRequest
	5,  // 15: ocean.v1.TransactionService.LockUtxos:input_type -> ocean.v1.LockUtxosRequest
	7,  // 16: ocean.v1.TransactionService.EstimateFees:input_type -> ocean.v1.EstimateFeesRequest
	9,  // 17: ocean.v1.TransactionService.SignTransaction:input_type -> ocean.v1.SignTransactionRequest
	11, // 18: ocean.v1.TransactionService.BroadcastTransaction:input_type -> ocean.v1.BroadcastTransactionRequest
	13, // 19: ocean.v1.TransactionService.CreatePset:input_type -> ocean.v1.CreatePsetRequest
	15, // 20: ocean.v1.TransactionService.UpdatePset:input_type -> ocean.v1.UpdatePsetRequest
	17, // 21: ocean.v1.TransactionService.BlindPset:input_type -> ocean.v1.BlindPsetRequest
	19, // 22: ocean.v1.TransactionService.SignPset:input_type -> ocean.v1.SignPsetRequest
	21, // 23: ocean.v1.TransactionService.Mint:input_type -> ocean.v1.MintRequest
	23, // 24: ocean.v1.TransactionService.Remint:input_type -> ocean.v1.RemintRequest
	25, // 25: ocean.v1.TransactionService.Burn:input_type -> ocean.v1.BurnRequest
	27, // 26: ocean.v1.TransactionService.Transfer:input_type -> ocean.v1.TransferRequest
	29, // 27: ocean.v1.TransactionService.PegInAddress:input_type -> ocean.v1.PegInAddressRequest
	31, // 28: ocean.v1.TransactionService.ClaimPegIn:input_type -> ocean.v1.ClaimPegInRequest
	33, // 29: ocean.v1.TransactionService.SignPsetWithSchnorrKey:input_type -> ocean.v1.SignPsetWithSchnorrKeyRequest
	2,  // 30: ocean.v1.TransactionService.GetTransaction:output_type -> ocean.v1.GetTransactionResponse
	4,  // 31: ocean.v1.TransactionService.SelectUtxos:output_type -> ocean.v1.SelectUtxosResponse
	6,  // 32: ocean.v1.TransactionService.LockUtxos:output_type -> ocean.v1.LockUtxosResponse
	8,  // 33: ocean.v1.TransactionService.EstimateFees:output_type -> ocean.v1.EstimateFeesResponse
	10, // 34: ocean.v1.TransactionService.SignTransaction:output_type -> ocean.v1.SignTransactionResponse
	12, // 35: ocean.v1.TransactionService.BroadcastTransaction:output_type -> ocean.v1.BroadcastTransactionResponse
	14, // 36: ocean.v1.TransactionService.CreatePset:output_type -> ocean.v1.CreatePsetResponse
	16, // 37: ocean.v1.TransactionService.UpdatePset:output_type -> ocean.v1.UpdatePsetResponse
	18, // 38: ocean.v1.TransactionService.BlindPset:output_type -> ocean.v1.BlindPsetResponse
	20, // 39: ocean.v1.TransactionService.SignPset:output_type -> ocean.v1.SignPsetResponse
	22, // 40: ocean.v1.TransactionService.Mint:output_type -> ocean.v1.MintResponse
	24, // 41: ocean.v1.TransactionService.Remint:output_type -> ocean.v1.RemintResponse
	26, // 42: ocean.v1.TransactionService.Burn:output_type -> ocean.v1.BurnResponse
	28, // 43: ocean.v1.TransactionService.Transfer:output_type -> ocean.v1.TransferResponse
	30, // 44: ocean.v1.TransactionService.PegInAddress:output_type -> ocean.v1.PegInAddressResponse
	32, // 45: ocean.v1.TransactionService.ClaimPegIn:output_type -> ocean.v1.ClaimPegInResponse
	34, // 46: ocean.v1.TransactionService.SignPsetWithSchnorrKey:output_type -> ocean.v1.SignPsetWithSchnorrKeyResponse
	30, // [30:47] is the sub-list for method output_type
	13, // [13:30] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ocean_v1_transaction_proto_init() }
func file_ocean_v1_transaction_proto_init() {
	if File_ocean_v1_transaction_proto != nil {
		return
	}
	file_ocean_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ocean_v1_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindPsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindPsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PegInAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PegInAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimPegInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimPegInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPsetWithSchnorrKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_v1_transaction_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPsetWithSchnorrKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocean_v1_transaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ocean_v1_transaction_proto_goTypes,
		DependencyIndexes: file_ocean_v1_transaction_proto_depIdxs,
		EnumInfos:         file_ocean_v1_transaction_proto_enumTypes,
		MessageInfos:      file_ocean_v1_transaction_proto_msgTypes,
	}.Build()
	File_ocean_v1_transaction_proto = out.File
	file_ocean_v1_transaction_proto_rawDesc = nil
	file_ocean_v1_transaction_proto_goTypes = nil
	file_ocean_v1_transaction_proto_depIdxs = nil
}
