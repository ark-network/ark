// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Layout(bodyContent templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"><meta http-equiv=\"Content-Security-Policy\" content=\"default-src &#39;self&#39;; style-src &#39;self&#39; &#39;unsafe-inline&#39; https://fonts.googleapis.com; font-src &#39;self&#39; data: https://fonts.gstatic.com; script-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; connect-src &#39;self&#39; ws://localhost:*; img-src &#39;self&#39; data:*;\"><meta name=\"theme-color\" content=\"#FEFEF5\"><title>Ark dashboard</title><meta name=\"keywords\" content=\"ark, dashboard\"><meta name=\"description\" content=\"ark dashboard\"><link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\"><link rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\"><link rel=\"preconnect\" href=\"//fonts.googleapis.com\" crossorigin><link rel=\"preconnect\" href=\"//fonts.gstatic.com\" crossorigin><link rel=\"manifest\" href=\"static/manifest.json\"><link rel=\"apple-touch-icon\" href=\"static/apple-touch-icon.png\"><link rel=\"shortcut icon\" href=\"static/favicon.ico\" type=\"image/x-icon\"><link rel=\"icon\" href=\"static/favicon.svg\" type=\"image/svg+xml\"><link rel=\"icon\" href=\"static/favicon.png\" sizes=\"any\"><link href=\"https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&amp;display=swap\" rel=\"stylesheet\"><link href=\"static/styles.css\" rel=\"stylesheet\"></head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, BodyScripts())
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<body class=\"bg-white text-gray-800 p-10\" onload=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.ComponentScript = BodyScripts()
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = bodyContent.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script src=\"static/scripts.js\"></script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

// BodyScripts defines JavaScript code.
func BodyScripts() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_BodyScripts_b1d1`,
		Function: `function __templ_BodyScripts_b1d1(){// from 4321 to 0.00004321 with '0' in gray
	const prettySats = (num) => {
    const length = String(num).length
    if (length > 8) return num
    let prefix = "0."
    for (let i = length; i < 8; i++) prefix += "0"
    return ` + "`" + `<span class="text-gray-400">${prefix}</span>${num}` + "`" + `
  }

  // from 1718963028 to "1w 2d 3h 4m 5s ago" or "in 4m 5s"
	const prettyTime = (unixtime) => {
    const minute = 60 // timestamp in seconds
    const hour = 60 * minute
    const day = 24 * hour
    const week = 7 * day
    const now = Math.floor(Date.now() / 1000)
    let delta = Math.abs(unixtime - now)
    if (delta === 0) return "now"
    let text = ""
    if (delta > week) {
      text += ` + "`" + `${Math.floor(delta / week)}w ` + "`" + `
      delta = delta % week
    }
    if (delta > day) {
      text += ` + "`" + `${Math.floor(delta / day)}d ` + "`" + `
      delta = delta % day
    }
    if (delta > hour) {
      text += ` + "`" + `${Math.floor(delta / hour)}h ` + "`" + `
      delta = delta % hour
    }
    if (delta > minute) {
      text += ` + "`" + `${Math.floor(delta / minute)}m` + "`" + `
      delta = delta % minute
    }
    if (delta > 0) {
      text += ` + "`" + ` ${delta}s` + "`" + `
    }
    return unixtime - now > 0 ? ` + "`" + `in ${text}` + "`" + ` : ` + "`" + `${text} ago` + "`" + `
  }

  // show txid in 31 characters: <first 14 chars>...<last 14 chars>
	// usefull when window width < 600 pixels
	const prettyTxId = (text, showChars = 14) => {
    if (text.length < 32) return text
    return ` + "`" + `${text.substring(0, showChars)}...${text.substring(text.length - showChars, text.length)}` + "`" + `
  }

  // redirects browser to local path
	const redirect = (path) => {
    const { origin, pathname } = window.location
		const prefix = pathname.split('/')[1]
    window.location = origin + '/' + prefix + path
  }


  document.querySelectorAll('.sats').forEach((x) => {
		x.innerHTML = prettySats(x.textContent)
	})

	document.querySelectorAll('.time').forEach((x) => {
		x.innerHTML = prettyTime(x.textContent)
	})

	document.querySelectorAll('.txid').forEach((x) => {
		const txid = x.textContent
		x.innerHTML = prettyTxId(txid)
		x.onclick = () => redirect(` + "`" + `/round/${txid}` + "`" + `)
	})

	document.querySelectorAll('.uuid').forEach((x) => {
		if (window.innerWidth < 600) x.innerHTML = prettyTxId(x.textContent)
	})

		document.querySelectorAll('.vtxo').forEach((x) => {
		const outpoint = x.textContent
		x.innerHTML = prettyTxId(outpoint)
		x.onclick = () => redirect(` + "`" + `/vtxo/${outpoint}` + "`" + `)
	})
}`,
		Call:       templ.SafeScript(`__templ_BodyScripts_b1d1`),
		CallInline: templ.SafeScriptInline(`__templ_BodyScripts_b1d1`),
	}
}
